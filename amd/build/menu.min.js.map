{"version":3,"file":"menu.min.js","sources":["../src/menu.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/*\n * @package    local_shopping_cart\n * @copyright  Wunderbyte GmbH <info@wunderbyte.at>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport ModalForm from 'core_form/modalform';\n\nimport {\n    get_string as getString\n        }\n        from 'core/str';\n\nexport var countdownelement = null;\nexport var interval = null;\nexport var visbilityevent = false;\n\n\nexport const init = () => {\n\n    // eslint-disable-next-line no-console\n    console.log('menu init');\n\n    const buttons = document.querySelectorAll('.dropdown-item.cancelallusers');\n\n    buttons.forEach(button => {\n\n        if (button.dataset.initialized == true) {\n            return;\n        }\n\n        // This is a functionality only linked to shopping cart, so we only make it visible here.\n        button.classList.remove('hidden');\n\n        button.dataset.initialized = true;\n\n        button.addEventListener('click', () => {\n\n            // eslint-disable-next-line no-console\n            console.log('button clicked');\n\n            confirmCancelAllUsersAndSetCreditModal(button);\n        });\n\n    });\n};\n\n/**\n *\n * @param {*} button\n */\nfunction confirmCancelAllUsersAndSetCreditModal(button) {\n\n    const itemid = button.dataset.id;\n    const componentname = button.dataset.componentname;\n\n    const modalForm = new ModalForm({\n\n        // Name of the class where form is defined (must extend \\core_form\\dynamic_form):\n        formClass: \"local_shopping_cart\\\\form\\\\modal_cancel_all_addcredit\",\n        // Add as many arguments as you need, they will be passed to the form:\n        args: {'itemid': itemid, 'componentname' : componentname},\n        // Pass any configuration settings to the modal dialogue, for example, the title:\n        modalConfig: {title: getString('confirmcanceltitle', 'local_shopping_cart')},\n        // DOM element that should get the focus after the modal dialogue is closed:\n        returnFocus: button,\n    });\n    // Listen to events if you want to execute something on form submit.\n    // Event detail will contain everything the process() function returned:\n    modalForm.addEventListener(modalForm.events.FORM_SUBMITTED, (e) => {\n        window.console.log(e.detail);\n\n        // eslint-disable-next-line no-console\n        console.log('we saved');\n    });\n\n    // Show the form.\n    modalForm.show();\n}"],"names":["console","log","document","querySelectorAll","forEach","button","dataset","initialized","classList","remove","addEventListener","itemid","id","componentname","modalForm","ModalForm","formClass","args","modalConfig","title","returnFocus","events","FORM_SUBMITTED","e","window","detail","show","confirmCancelAllUsersAndSetCreditModal"],"mappings":";;;;;8OA4B8B,uBACR,8BACM,gBAGR,KAGhBA,QAAQC,IAAI,aAEIC,SAASC,iBAAiB,iCAElCC,SAAQC,SAEsB,GAA9BA,OAAOC,QAAQC,cAKnBF,OAAOG,UAAUC,OAAO,UAExBJ,OAAOC,QAAQC,aAAc,EAE7BF,OAAOK,iBAAiB,SAAS,KAG7BV,QAAQC,IAAI,2BAYwBI,cAEtCM,OAASN,OAAOC,QAAQM,GACxBC,cAAgBR,OAAOC,QAAQO,cAE/BC,UAAY,IAAIC,mBAAU,CAG5BC,UAAW,wDAEXC,KAAM,QAAWN,qBAA0BE,eAE3CK,YAAa,CAACC,OAAO,mBAAU,qBAAsB,wBAErDC,YAAaf,SAIjBS,UAAUJ,iBAAiBI,UAAUO,OAAOC,gBAAiBC,IACzDC,OAAOxB,QAAQC,IAAIsB,EAAEE,QAGrBzB,QAAQC,IAAI,eAIhBa,UAAUY,OApCFC,CAAuCtB"}