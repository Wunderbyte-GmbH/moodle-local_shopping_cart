{"version":3,"file":"cart.min.js","sources":["../src/cart.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/*\n * @package    local_shopping_cart\n * @copyright  Wunderbyte GmbH <info@wunderbyte.at>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport Ajax from 'core/ajax';\nimport Templates from 'core/templates';\n\nimport ModalFactory from 'core/modal_factory';\nimport ModalEvents from 'core/modal_events';\n\nimport {confirmPayment} from 'local_shopping_cart/cashier';\nimport {discountModal} from 'local_shopping_cart/cashier';\nimport {showNotification} from 'local_shopping_cart/notifications';\n\nimport {\n    get_strings as getStrings,\n    get_string as getString\n        }\n        from 'core/str';\n\nexport var interval = null;\nexport var visbilityevent = false;\n\n// This file inits the cart on every page, on checkout and cashier.\n// The cart is always loaed entirely and replaced via css.\n// The cashiers cart are identified in the DOM via userid -1 (CASHIERUSER).\n// The translation to real userids is done in the PHP only.\n\nconst CASHIERUSER = -1;\n\nconst SELECTORS = {\n    SHOPPING_CART_ITEM: '[data-item=\"shopping_cart_item\"]',\n    NAVBARCONTAINER: '#nav-shopping_cart-popover-container .shopping-cart-items-container',\n    TRASHCLASS: 'fa-trash-o',\n    DISCOUNTCLASS: 'fa-eur',\n    BADGECOUNT: '#nav-shopping_cart-popover-container div.count-container',\n    COUNTDOWN: '#nav-shopping_cart-popover-container span.expirationdate',\n    CASHIERSCART: 'div.shopping-cart-cashier-items-container',\n    CHECKOUTCART: 'div.shopping-cart-checkout-items-container',\n    PRICELABELCHECKBOX: '.sc_price_label input.usecredit-checkbox',\n    PRICELABELAREA: '.sc_price_label',\n    CHECKOUTBUTTON: '#nav-shopping_cart-popover-container #shopping-cart-checkout-button',\n    PAYMENTREGIONBUTTON: 'div.shopping_cart_payment_region button',\n};\n/**\n *\n * @param {*} expirationdate\n */\n\n export const init = (expirationdate) => {\n\n    initTimer(expirationdate);\n\n    // We might have more than one container.\n    let containers = [];\n    containers = document.querySelectorAll(SELECTORS.NAVBARCONTAINER\n        + \",\" + SELECTORS.CASHIERSCART\n        + \",\" + SELECTORS.CHECKOUTCART);\n\n    containers.forEach(container => {\n\n        container.addEventListener('click', event => {\n\n            // Decide the target of the click.\n            const element = event.target;\n\n            if (element.classList.contains(SELECTORS.TRASHCLASS)) {\n\n                const userid = element.dataset.userid ? element.dataset.userid : 0;\n                const component = element.dataset.component;\n                const area = element.dataset.area;\n                const itemid = element.dataset.itemid;\n\n                deleteItem(itemid, component, area, userid);\n            } else if (element.classList.contains(SELECTORS.DISCOUNTCLASS)) {\n\n                discountModal(event);\n            }\n        });\n    });\n\n    // Re-init cart on page reload or navigation to another page - required for 2-digit price precision visibility.\n    document.addEventListener(\"readystatechange\", () => {\n        if (document.readyState !== 'loading') {\n            reinit();\n        }\n    });\n\n    if (visbilityevent == false) {\n        document.addEventListener(\"visibilitychange\", function() {\n            visbilityevent = true;\n            if (document.visibilityState === 'visible') {\n                reinit();\n            }\n        });\n    }\n\n    // Initially, we need to add the zeroPriceListener once.\n    const paymentbutton = document.querySelector(SELECTORS.PAYMENTREGIONBUTTON);\n    if (paymentbutton) {\n        const data = {\n            price: paymentbutton.dataset.price,\n            currency: paymentbutton.dataset.currency,\n        };\n        addZeroPriceListener(data);\n    }\n};\n\nexport const buttoninit = (itemid, component, area) => {\n\n    // If we don't have an itemid, we need to look for all the buttons.\n    if (!itemid || !component || !area) {\n        const selector = '[data-objecttable=\"local_shopping_cart\"';\n        const allbuttons = document.querySelectorAll(\n            selector);\n\n        allbuttons.forEach(button => {\n            const itemid = button.dataset.itemid;\n            const area = button.dataset.area;\n            const component = button.dataset.component;\n            buttoninit(itemid, component, area);\n        });\n        return;\n    }\n\n    // Return all buttons with the add to cart functionality.\n    const buttons =\n    document.querySelectorAll(\n        'div'\n        + '[data-itemid=\"' + itemid + '\"]'\n        + '[data-component=\"' + component + '\"]'\n        + '[data-area=\"' + area + '\"]'\n        + '[data-objecttable=\"local_shopping_cart\"');\n\n    buttons.forEach(addtocartbutton => {\n\n        // We need to check all the buttons.\n        toggleActiveButtonState(addtocartbutton);\n\n        // We only ever initialize the button once.\n        if (!addtocartbutton || addtocartbutton.dataset.initialized === 'true') {\n            return;\n        }\n        addtocartbutton.dataset.initialized = 'true';\n\n        // If the button has the nojs flag, we don't add the listener at all.\n\n        if (addtocartbutton.dataset.nojs) {\n            return;\n        }\n\n        // Add click eventlistern to oneself.\n        addtocartbutton.addEventListener('click', event => {\n\n            if (addtocartbutton.dataset.blocked == 'true') {\n                return;\n            }\n\n            // If we find the disabled class, the click event is aborted.\n            if (addtocartbutton.classList.contains('disabled')) {\n                event.preventDefault();\n                event.stopPropagation();\n                // DeleteItem(itemid, component, area);\n            } else {\n                // Event.preventDefault();\n                // Event.stopPropagation();\n                addItem(itemid, component, area);\n            }\n        });\n    });\n\n    return;\n};\n\n/**\n * Function to reload the cart. We can pass on the certain component if we need to make sure that not only the cart is reloaded.\n * This is the case when adding or deleting a certain item and a special button has to be reset.\n * @param {*} userid\n */\nexport const reinit = (userid = 0) => {\n\n    userid = transformUserIdForCashier(userid);\n\n    Ajax.call([{\n        methodname: \"local_shopping_cart_get_shopping_cart_items\",\n        args: {\n            userid\n        },\n        done: function(data) {\n\n            // If we are on the cashier page, we add the possibility to add a discount to the cart items.\n            const oncashier = window.location.href.indexOf(\"cashier.php\");\n\n            if (oncashier > 0) {\n                data.iscashier = true;\n            } else {\n                data.iscashier = false;\n            }\n\n            let containers = [];\n\n            if (userid != 0 && data.iscashier) {\n                containers = document.querySelectorAll(SELECTORS.CASHIERSCART);\n            } else {\n                containers = document.querySelectorAll(SELECTORS.NAVBARCONTAINER\n                    + \",\" + SELECTORS.CHECKOUTCART);\n            }\n\n            let promises = [];\n\n            // Before rendering, we convert all prices to strings with 2 fixed decimals.\n            convertPricesToNumberFormat(data);\n\n            // We render for promise for all the containers.\n            promises.push(Templates.renderForPromise('local_shopping_cart/shopping_cart_items', data).then(({html, js}) => {\n                containers.forEach(container => {\n                // We know we will always find the Navbar, so we can do this right away.\n                    Templates.replaceNodeContents(container, html, js);\n                });\n                return true;\n            }).catch((e) => {\n                // eslint-disable-next-line no-console\n                console.log(e);\n            }));\n\n            Promise.all(promises).then(() => {\n\n                // If we are on the cashier page, we add the possibility to add a discount to the cart items.\n                if (!(userid != 0 && data.iscashier)) {\n                    clearInterval(interval);\n                    initTimer(data.expirationdate);\n\n                    updateBadge(data.count);\n                }\n\n                toggleActiveButtonState();\n\n                updateTotalPrice(userid);\n\n                return;\n            }).catch(e => {\n                // eslint-disable-next-line no-console\n                console.log(e);\n            });\n\n        },\n        fail: ex => {\n            // eslint-disable-next-line no-console\n            console.log(\"ex:\" + ex);\n        },\n    }]);\n};\n\n/**\n * This function is only called when the timer invalidates the cart.\n * This always works for the USER-user, so no userid is transmitted.\n * The USER-user is chosen with the userid 0, we just reinit everything afert sending.\n */\nexport const deleteAllItems = () => {\n    Ajax.call([{\n        methodname: \"local_shopping_cart_delete_all_items_from_cart\",\n        args: {\n        },\n        done: function() {\n            reinit(0);\n        },\n        fail: function(ex) {\n            // eslint-disable-next-line no-console\n            console.log(ex);\n        },\n    }]);\n};\n\nexport const deleteItem = (itemid, component, area, userid) => {\n\n    userid = transformUserIdForCashier(userid);\n\n    Ajax.call([{\n        methodname: \"local_shopping_cart_delete_item\",\n        args: {\n            'itemid': itemid,\n            'component': component,\n            'area': area,\n            'userid': userid\n        },\n        done: function(data) {\n\n            getString('item_deleted', 'local_shopping_cart', data.itemname).then(message => {\n                showNotification(message, 'success');\n                return;\n            }).catch(e => {\n                // eslint-disable-next-line no-console\n                console.log(e);\n            });\n\n            reinit(userid);\n        },\n        fail: function() {\n\n            reinit(userid);\n        },\n    }]);\n};\n\nexport const addItem = (itemid, component, area) => {\n\n    let userid = transformUserIdForCashier();\n\n    if (!Number.isInteger(userid)) {\n        userid = parseInt(userid);\n    }\n\n    Ajax.call([{\n        methodname: \"local_shopping_cart_add_item\",\n        args: {\n            'area': area,\n            'component': component,\n            'itemid': itemid,\n            'userid': userid\n        },\n        done: function(data) {\n\n            data.component = component;\n            data.area = area;\n            data.itemid = itemid;\n            data.userid = userid; // For the mustache template, we need to obey structure.\n\n            if (data.success != 1) {\n\n                getString('cartisfull', 'local_shopping_cart').then(message => {\n                    showNotification(message, 'danger');\n                    return;\n                }).catch(e => {\n                    // eslint-disable-next-line no-console\n                    console.log(e);\n                });\n\n                return;\n            } else if (data.success == 1) {\n                getString('addedtocart', 'local_shopping_cart', data.itemname).then(message => {\n                    showNotification(message, 'success');\n                    return;\n                }).catch(e => {\n                    // eslint-disable-next-line no-console\n                    console.log(e);\n                });\n\n                reinit(userid);\n            }\n\n        },\n        fail: function(ex) {\n            // eslint-disable-next-line no-console\n            console.log('error', ex);\n        }\n    }], true);\n};\n\n/**\n *\n * @param {*} userid\n * @param {*} usecredit\n */\nexport const updateTotalPrice = (userid = 0, usecredit = true) => {\n\n    // On cashier, update price must always be for cashier user.\n    const oncashier = window.location.href.indexOf(\"cashier.php\");\n\n    if (oncashier > 0) {\n        userid = CASHIERUSER;\n    }\n\n    if (!Number.isInteger(userid)) {\n        userid = parseInt(userid);\n    }\n\n    // We must make sure the checkbox is only once visible on the site.\n    // const checkbox = document.querySelector(SELECTORS.PRICELABELCHECKBOX);\n    usecredit = usecredit ? 1 : 0;\n\n    Ajax.call([{\n        methodname: \"local_shopping_cart_get_price\",\n        args: {\n            userid,\n            usecredit\n        },\n        done: function(data) {\n\n            // We take the usecredit value we receive from the server.\n            if (data.usecredit == 1) {\n                data.usecreditvalue = 'checked';\n            } else {\n                data.usecreditvalue = '';\n            }\n\n            data.checkboxid = Math.random().toString(36).slice(2, 5);\n\n            data.userid = userid;\n\n            const labelareas = document.querySelectorAll(SELECTORS.PRICELABELAREA);\n\n            // Before rendering, we convert all prices to strings with 2 fixed decimals.\n            convertPricesToNumberFormat(data);\n\n            Templates.renderForPromise('local_shopping_cart/price_label', data).then(({html, js}) => {\n\n                labelareas.forEach(labelarea => {\n                    Templates.replaceNodeContents(labelarea, html, js);\n\n                    addZeroPriceListener(data);\n                });\n\n                return true;\n            }).catch((e => {\n                // eslint-disable-next-line no-console\n                console.log(e);\n            }));\n\n            const checkoutButton = document.querySelector(SELECTORS.CHECKOUTBUTTON);\n            if (data.count == 0) {\n                checkoutButton.classList.add(\"disabled\");\n            } else {\n                checkoutButton.classList.remove(\"disabled\");\n            }\n\n        },\n        fail: function(ex) {\n            // eslint-disable-next-line no-console\n            console.log('error', ex);\n        }\n    }], true);\n};\n\n/**\n * Looks for the payment buttun, updates cost and adds the listener.\n * @param {*} data\n */\nfunction addZeroPriceListener(data) {\n\n    let paymentbutton = document.querySelector(\".shopping_cart_payment_region button\");\n\n    if (paymentbutton) {\n\n        const price = data.price;\n        const currency = data.currency;\n\n        paymentbutton.dataset.cost = price + \" \" + currency;\n\n        if (price == 0) {\n\n            paymentbutton.addEventListener('click', dealWithZeroPrice);\n        } else {\n\n            paymentbutton.removeEventListener('click', dealWithZeroPrice);\n        }\n    }\n}\n\n/**\n *\n * @param {*} event\n */\nfunction dealWithZeroPrice(event) {\n\n    event.stopPropagation();\n    event.preventDefault();\n\n    confirmZeroPriceCheckoutModal(event.target);\n}\n\n/**\n * Start the timer.\n *\n * @param {integer} duration\n * @param {integer} display\n */\nfunction startTimer(duration, display) {\n\n    var timer = duration,\n                minutes,\n                seconds;\n    interval = setInterval(function() {\n\n        minutes = parseInt(timer / 60, 10);\n        seconds = parseInt(timer % 60, 10);\n\n        minutes = minutes < 10 ? \"0\" + minutes : minutes;\n        seconds = seconds < 10 ? \"0\" + seconds : seconds;\n\n        display.textContent = minutes + \":\" + seconds;\n\n        if (--timer < 0) {\n            deleteAllItems();\n\n            clearInterval(interval);\n        }\n    }, 1000);\n}\n\n\n/**\n * Initialize Timer.\n *\n * @param {integer} expirationdate\n *\n */\nfunction initTimer(expirationdate = null) {\n\n    const countdownelement = document.querySelector(SELECTORS.COUNTDOWN);\n\n    if (!countdownelement) {\n        return;\n    }\n\n    if (interval) {\n        clearInterval(interval);\n    }\n    let delta = 0;\n    let now = Date.now('UTC');\n    now = (new Date()).getTime() / 1000;\n    if (expirationdate) {\n        delta = (expirationdate - now);\n    }\n    if (delta <= 0) {\n        delta = 0;\n        countdownelement.classList.add(\"hidden\");\n    } else if (delta > 0) {\n        countdownelement.classList.remove(\"hidden\");\n        startTimer(delta, countdownelement);\n    }\n}\n\n/**\n *\n * @param {*} element\n */\nfunction confirmZeroPriceCheckoutModal(element) {\n\n    getStrings([\n        {key: 'confirmzeropricecheckouttitle', component: 'local_shopping_cart'},\n        {key: 'confirmzeropricecheckoutbody', component: 'local_shopping_cart'},\n        {key: 'confirmzeropricecheckout', component: 'local_shopping_cart'}\n    ]\n    ).then(strings => {\n\n        ModalFactory.create({type: ModalFactory.types.SAVE_CANCEL}).then(modal => {\n\n            modal.setTitle(strings[0]);\n                modal.setBody(strings[1]);\n                modal.setSaveButtonText(strings[2]);\n                modal.getRoot().on(ModalEvents.save, function() {\n\n                    const userid = element.dataset.userid;\n\n                    if (userid) {\n                        // The second parameter designs the payment method.\n                        // In the cart, the constant PAYMENT_METHOD_CREDITS translates to 2.\n                        confirmPayment(userid, 2);\n                    }\n                });\n\n                modal.show();\n                return modal;\n        }).catch(e => {\n            // eslint-disable-next-line no-console\n            console.log(e);\n        });\n        return true;\n    }).catch(e => {\n        // eslint-disable-next-line no-console\n        console.log(e);\n    });\n}\n\n/**\n * Function to update the page in the nav bar.\n * @param {*} count\n */\nfunction updateBadge(count) {\n\n    const badge = document.querySelector(SELECTORS.BADGECOUNT);\n\n    if (count > 0) {\n        badge.innerHTML = count;\n        badge.classList.remove('hidden');\n    } else {\n        badge.innerHTML = count;\n        badge.classList.add('hidden');\n    }\n}\n\n/**\n * Function to toggle the active state.\n * @param {*} button\n */\nfunction toggleActiveButtonState(button = null) {\n\n    let selector = '';\n    let component = null;\n    let area = null;\n    let itemid = null;\n\n    // If we have a button, we only look for this particular itemid.\n    if (button) {\n\n        // We'll find the right variables in the DOM.\n        itemid = button.dataset.itemid;\n        component = button.dataset.component;\n        area = button.dataset.area;\n\n        selector =\n            'div'\n            + '[data-itemid=\"' + itemid + '\"]'\n            + '[data-component=\"' + component + '\"]'\n            + '[data-area=\"' + area + '\"]'\n            + '[data-objecttable=\"local_shopping_cart\"';\n    } else {\n        // As we might have more than one of these buttons, we always need to look for all of them in the document.\n        // We will update for all the buttons we find.\n        selector =\n        'div'\n        + '[data-objecttable=\"local_shopping_cart\"';\n    }\n\n    const buttons = document.querySelectorAll(selector);\n\n    // Make sure item is not yet in shopping cart. If so, add disabled class.\n    let shoppingcart = document.querySelector(SELECTORS.CASHIERSCART);\n\n    if (!shoppingcart) {\n        shoppingcart = document.querySelector(SELECTORS.NAVBARCONTAINER);\n    }\n\n    buttons.forEach(addtocartbutton => {\n\n        component = addtocartbutton.dataset.component;\n        area = addtocartbutton.dataset.area;\n        itemid = addtocartbutton.dataset.itemid;\n\n        const cartitem = shoppingcart.querySelector('[id^=\"item-' + component + '-' + area + '-' + itemid + '\"]');\n\n        if (cartitem) {\n\n            addtocartbutton.classList.add('disabled');\n        } else {\n\n            addtocartbutton.classList.remove('disabled');\n        }\n    });\n}\n\n/**\n * Function to init Price Label and add Listener.\n * @param {*} userid\n */\nexport function initPriceLabel(userid) {\n\n    if (userid < 1) {\n        userid = 0;\n    }\n\n    const checkbox = document.querySelector(SELECTORS.PRICELABELCHECKBOX);\n\n    if (checkbox) {\n        checkbox.addEventListener('change', event => {\n\n            if (event.currentTarget.checked) {\n                updateTotalPrice(userid, true);\n            } else {\n                updateTotalPrice(userid, false);\n            }\n        });\n    }\n}\n\n/**\n * We need to know if we are on the cashier page to transform userid if necessary.\n * @param {integer} userid\n * @returns {integer}\n */\nfunction transformUserIdForCashier(userid = null) {\n\n    const oncashier = window.location.href.indexOf(\"cashier.php\");\n\n    if ((userid == CASHIERUSER || !(userid === 0 || userid === \"0\")) && oncashier > 0) {\n        userid = CASHIERUSER;\n    } else if (userid === null) {\n        userid = 0;\n    }\n\n    if (!Number.isInteger(userid)) {\n        userid = parseInt(userid);\n    }\n\n    return userid;\n}\n\n/**\n * Helper function to convert prices to number format before rendering.\n * @param {Object} data the data containing the price values\n */\nfunction convertPricesToNumberFormat(data) {\n    // Render all prices to 2 fixed decimals.\n    if (data.price) {\n        data.price = Number(data.price).toFixed(2);\n    }\n    if (data.initialtotal) {\n        data.initialtotal = Number(data.initialtotal).toFixed(2);\n    }\n    if (data.initialtotal_net) {\n        // eslint-disable-next-line camelcase\n        data.initialtotal_net = Number(data.initialtotal_net).toFixed(2);\n    }\n    if (data.discount) {\n        data.discount = Number(data.discount).toFixed(2);\n    }\n    if (data.deductible) {\n        data.deductible = Number(data.deductible).toFixed(2);\n    }\n    if (data.credit) {\n        data.credit = Number(data.credit).toFixed(2);\n    }\n    if (data.remainingcredit) {\n        data.remainingcredit = Number(data.remainingcredit).toFixed(2);\n    }\n    if (data.price_net) {\n        // eslint-disable-next-line camelcase\n        data.price_net = Number(data.price_net).toFixed(2);\n    }\n    if (data.price_gross) {\n        // eslint-disable-next-line camelcase\n        data.price_gross = Number(data.price_gross).toFixed(2);\n    }\n    if (data.items) {\n        for (var i = 0; i < data.items.length; i++) {\n            if (data.items[i].price) {\n                data.items[i].price = Number(data.items[i].price).toFixed(2);\n            }\n            if (data.items[i].price_gross) {\n                // eslint-disable-next-line camelcase\n                data.items[i].price_gross = Number(data.items[i].price_gross).toFixed(2);\n            }\n            if (data.items[i].price_net) {\n                // eslint-disable-next-line camelcase\n                data.items[i].price_net = Number(data.items[i].price_net).toFixed(2);\n            }\n        }\n    }\n}\n"],"names":["userid","checkbox","document","querySelector","SELECTORS","addEventListener","event","currentTarget","checked","updateTotalPrice","interval","visbilityevent","expirationdate","initTimer","containers","querySelectorAll","forEach","container","element","target","classList","contains","dataset","component","area","itemid","deleteItem","readyState","reinit","visibilityState","paymentbutton","addZeroPriceListener","price","currency","buttoninit","selector","button","addtocartbutton","toggleActiveButtonState","initialized","nojs","blocked","preventDefault","stopPropagation","addItem","transformUserIdForCashier","call","methodname","args","done","data","oncashier","window","location","href","indexOf","iscashier","promises","convertPricesToNumberFormat","push","Templates","renderForPromise","then","_ref","html","js","replaceNodeContents","catch","e","console","log","Promise","all","clearInterval","updateBadge","count","fail","ex","deleteAllItems","itemname","message","Number","isInteger","parseInt","success","usecredit","usecreditvalue","checkboxid","Math","random","toString","slice","labelareas","_ref2","labelarea","checkoutButton","add","remove","cost","dealWithZeroPrice","removeEventListener","key","strings","create","type","ModalFactory","types","SAVE_CANCEL","modal","setTitle","setBody","setSaveButtonText","getRoot","on","ModalEvents","save","show","startTimer","duration","display","minutes","seconds","timer","setInterval","textContent","countdownelement","delta","now","Date","getTime","badge","innerHTML","buttons","shoppingcart","toFixed","initialtotal","initialtotal_net","discount","deductible","credit","remainingcredit","price_net","price_gross","items","i","length"],"mappings":"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"}