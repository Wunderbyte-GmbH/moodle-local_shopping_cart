{"version":3,"file":"address.min.js","sources":["../src/address.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/*\n * @package    local_shopping_cart\n * @copyright  Wunderbyte GmbH <info@wunderbyte.at>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport {showNotification} from 'local_shopping_cart/notifications';\nimport ModalForm from 'core_form/modalform';\n\nimport {get_string as getString} from 'core/str';\nimport Templates from 'core/templates';\n\nconst SELECTORS = {\n    ADDRESSRENDERCONTAINER: '#addressestemplatespace',\n    NEWADDRESSBUTTON: '.shopping-cart-new-address',\n};\n\nconst DELETESELECTEDADDRESS = '.shopping-cart-delete-selected-address';\n\nexport const init = () => {\n    const buttons = document.querySelectorAll(SELECTORS.NEWADDRESSBUTTON);\n    if (buttons) {\n        buttons.forEach(newAddressButton => {\n            newAddressButton.addEventListener('click', e => {\n                e.preventDefault();\n                newAddressModal(newAddressButton);\n            });\n        });\n    }\n    setDeletionEventListeners();\n};\n\n/**\n * Show Modal.\n */\nexport function setDeletionEventListeners() {\n    const deleteAddressButtons = document.querySelectorAll(DELETESELECTEDADDRESS);\n    if (deleteAddressButtons) {\n        deleteAddressButtons.forEach(deleteAddressButton => {\n            deleteAddressButton.addEventListener('click', e => {\n                handleAddressDeletion(e, deleteAddressButton);\n            });\n        });\n    }\n}\n\n/**\n * Show Modal.\n * @param {Event} event\n * @param {HTMLElement} deleteAddressButton\n */\nexport function handleAddressDeletion(event, deleteAddressButton) {\n    event.preventDefault();\n    const addressKey = deleteAddressButton.dataset.addresskey;\n    const selectedradio = document.querySelector(\n        `input[name=\"selectedaddress_${addressKey}\"]:checked`\n    );\n\n    if (selectedradio) {\n        const addressId = selectedradio.value;\n        confirmAndDeleteAddress(addressId, deleteAddressButton);\n    } else {\n        getString('addresses:delete:noaddressselected', 'local_shopping_cart').then(str => {\n            showNotification(str, 'warning');\n            return;\n        }).catch(\n            // eslint-disable-next-line no-console\n            console.error\n        );\n    }\n}\n\n/**\n * Show a confirmation modal and trigger the address deletion process.\n * @param {string} addressId\n * @param {string} button\n */\nfunction confirmAndDeleteAddress(addressId, button) {\n\n    const modalForm = new ModalForm({\n        formClass: \"local_shopping_cart\\\\form\\\\delete_user_address\",\n        args: {addressid: addressId},\n        modalConfig: {\n            title: getString('addresses:delete:selected', 'local_shopping_cart'),\n        },\n        returnFocus: button,\n        saveButtonText: getString('addresses:delete:submit', 'local_shopping_cart')\n    });\n\n    modalForm.addEventListener(modalForm.events.FORM_SUBMITTED, (e) => {\n        deselectAddressCheckbox(button.dataset.addresskey);\n        const response = e.detail;\n        deleteAddress(response);\n        redrawRenderedAddresses(response.templatedata);\n    });\n\n    modalForm.show();\n    return;\n}\n\n/**\n * @param {String} addressType\n */\nfunction deselectAddressCheckbox(addressType) {\n    const selectedRadio = document.querySelector(`input[name=\"selectedaddress_${addressType}\"]:checked`);\n    if (selectedRadio) {\n        selectedRadio.checked = false;\n        const event = new Event('change', {bubbles: true});\n        selectedRadio.dispatchEvent(event);\n    }\n}\n\n/**\n * Trigger the address deletion via a web service.\n * @param {string} response\n */\nfunction deleteAddress(response) {\n    if (response == 1) {\n\n        getString('addresses:delete:success', 'local_shopping_cart').then(successMessage => {\n            showNotification(successMessage, 'success');\n            return;\n        }).catch(\n            // eslint-disable-next-line no-console\n            console.error\n        );\n    } else {\n        getString('addresses:delete:error', 'local_shopping_cart').then(successMessage => {\n            showNotification(successMessage, 'error');\n            return;\n        }).catch(\n            // eslint-disable-next-line no-console\n            console.error\n        );\n    }\n}\n\n/**\n * Show Modal.\n * @param {htmlElement} button\n */\nexport function newAddressModal(button) {\n    const modalForm = new ModalForm({\n\n        // Name of the class where form is defined (must extend \\core_form\\dynamic_form):\n        formClass: \"local_shopping_cart\\\\form\\\\modal_new_address\",\n        // Add as many arguments as you need, they will be passed to the form:\n        args: {},\n        // Pass any configuration settings to the modal dialogue, for example, the title:\n        modalConfig: {title: getString('addresses:newaddress', 'local_shopping_cart')},\n        // DOM element that should get the focus after the modal dialogue is closed:\n        returnFocus: button,\n        saveButtonText: getString('addresses:newaddress:submit', 'local_shopping_cart')\n    });\n    // Listen to events if you want to execute something on form submit.\n    // Event detail will contain everything the process() function returned:\n    modalForm.addEventListener(modalForm.events.FORM_SUBMITTED, (e) => {\n        const response = e.detail;\n        getString('addresses:newaddress:saved', 'local_shopping_cart').then(str => {\n            showNotification(str, 'info');\n            return null;\n        }).catch((e) => {\n            // eslint-disable-next-line no-console\n            console.log(e);\n        });\n        redrawRenderedAddresses(response.templatedata);\n    });\n\n    modalForm.show();\n}\n\n/**\n * Re-Renders the address list with the newly returned data (most possible containing new saved addresses)\n * @param {Array} data data from addresses::get_template_render_data needed for rendering the address.mustache template\n */\nfunction redrawRenderedAddresses(data) {\n    Templates.renderForPromise('local_shopping_cart/address', data).then(({html, js}) => {\n        Templates.replaceNodeContents(document.querySelector(SELECTORS.ADDRESSRENDERCONTAINER), html, js);\n        const event = new CustomEvent('local_shopping_cart/addressesRedrawn', {});\n        document.dispatchEvent(event);\n        return null;\n    }).catch((e) => {\n        // eslint-disable-next-line no-console\n        console.log(e);\n    });\n}\n"],"names":["SELECTORS","setDeletionEventListeners","deleteAddressButtons","document","querySelectorAll","forEach","deleteAddressButton","addEventListener","e","handleAddressDeletion","event","preventDefault","addressKey","dataset","addresskey","selectedradio","querySelector","addressId","button","modalForm","ModalForm","formClass","args","addressid","modalConfig","title","returnFocus","saveButtonText","events","FORM_SUBMITTED","addressType","selectedRadio","checked","Event","bubbles","dispatchEvent","deselectAddressCheckbox","response","detail","then","successMessage","catch","console","error","deleteAddress","redrawRenderedAddresses","templatedata","show","confirmAndDeleteAddress","value","str","newAddressModal","log","data","renderForPromise","_ref","html","js","replaceNodeContents","CustomEvent","buttons","newAddressButton"],"mappings":";;;;;+UA2BMA,iCACsB,0BADtBA,2BAEgB,sCAqBNC,kCACNC,qBAAuBC,SAASC,iBAnBZ,0CAoBtBF,sBACAA,qBAAqBG,SAAQC,sBACzBA,oBAAoBC,iBAAiB,SAASC,IAC1CC,sBAAsBD,EAAGF,oCAWzBG,sBAAsBC,MAAOJ,qBACzCI,MAAMC,uBACAC,WAAaN,oBAAoBO,QAAQC,WACzCC,cAAgBZ,SAASa,oDACIJ,6BAG/BG,cAAe,WAmBUE,UAAWC,cAElCC,UAAY,IAAIC,mBAAU,CAC5BC,UAAW,iDACXC,KAAM,CAACC,UAAWN,WAClBO,YAAa,CACTC,OAAO,mBAAU,4BAA6B,wBAElDC,YAAaR,OACbS,gBAAgB,mBAAU,0BAA2B,yBAGzDR,UAAUZ,iBAAiBY,UAAUS,OAAOC,gBAAiBrB,cAchCsB,mBACvBC,cAAgB5B,SAASa,oDAA6Cc,8BACxEC,cAAe,CACfA,cAAcC,SAAU,QAClBtB,MAAQ,IAAIuB,MAAM,SAAU,CAACC,SAAS,IAC5CH,cAAcI,cAAczB,QAlB5B0B,CAAwBlB,OAAOL,QAAQC,kBACjCuB,SAAW7B,EAAE8B,iBAyBJD,UACH,GAAZA,6BAEU,2BAA4B,uBAAuBE,MAAKC,qDAC7CA,eAAgB,cAElCC,MAECC,QAAQC,2BAGF,yBAA0B,uBAAuBJ,MAAKC,qDAC3CA,eAAgB,YAElCC,MAECC,QAAQC,OAxCZC,CAAcP,UACdQ,wBAAwBR,SAASS,iBAGrC3B,UAAU4B,OApCNC,CADkBjC,cAAckC,MACG3C,6CAEzB,qCAAsC,uBAAuBiC,MAAKW,0CACvDA,IAAK,cAEvBT,MAECC,QAAQC,gBA0EJQ,gBAAgBjC,cACtBC,UAAY,IAAIC,mBAAU,CAG5BC,UAAW,+CAEXC,KAAM,GAENE,YAAa,CAACC,OAAO,mBAAU,uBAAwB,wBAEvDC,YAAaR,OACbS,gBAAgB,mBAAU,8BAA+B,yBAI7DR,UAAUZ,iBAAiBY,UAAUS,OAAOC,gBAAiBrB,UACnD6B,SAAW7B,EAAE8B,2BACT,6BAA8B,uBAAuBC,MAAKW,0CAC/CA,IAAK,QACf,QACRT,OAAOjC,IAENkC,QAAQU,IAAI5C,MAEhBqC,wBAAwBR,SAASS,iBAGrC3B,UAAU4B,gBAOLF,wBAAwBQ,yBACnBC,iBAAiB,8BAA+BD,MAAMd,MAAKgB,WAACC,KAACA,KAADC,GAAOA,4BAC/DC,oBAAoBvD,SAASa,cAAchB,kCAAmCwD,KAAMC,UACxF/C,MAAQ,IAAIiD,YAAY,uCAAwC,WACtExD,SAASgC,cAAczB,OAChB,QACR+B,OAAOjC,IAENkC,QAAQU,IAAI5C,oBApKA,WACVoD,QAAUzD,SAASC,iBAAiBJ,4BACtC4D,SACAA,QAAQvD,SAAQwD,mBACZA,iBAAiBtD,iBAAiB,SAASC,IACvCA,EAAEG,iBACFwC,gBAAgBU,wBAI5B5D"}