{"version":3,"file":"address.min.js","sources":["../src/address.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/*\n * @package    local_shopping_cart\n * @copyright  Wunderbyte GmbH <info@wunderbyte.at>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport {showNotification} from 'local_shopping_cart/notifications';\nimport ModalForm from 'core_form/modalform';\n\nimport {get_string as getString} from 'core/str';\nimport Templates from 'core/templates';\n\nconst SELECTORS = {\n    ADDRESSRENDERCONTAINER: '#addressestemplatespace',\n    NEWADDRESSBUTTON: '.shopping-cart-new-address',\n};\n\nexport const init = () => {\n    // eslint-disable-next-line no-console\n    console.log('run init');\n\n    const buttons = document.querySelectorAll(SELECTORS.NEWADDRESSBUTTON);\n    if (buttons) {\n        buttons.forEach(newAddressButton => {\n            newAddressButton.addEventListener('click', e => {\n                e.preventDefault();\n                newAddressModal(newAddressButton);\n            });\n        });\n    }\n\n};\n\n/**\n * Show Modal.\n * @param {htmlElement} button\n */\nexport function newAddressModal(button) {\n\n    // eslint-disable-next-line no-console\n    console.log('newAddressModal');\n\n    const modalForm = new ModalForm({\n\n        // Name of the class where form is defined (must extend \\core_form\\dynamic_form):\n        formClass: \"local_shopping_cart\\\\form\\\\modal_new_address\",\n        // Add as many arguments as you need, they will be passed to the form:\n        args: {},\n        // Pass any configuration settings to the modal dialogue, for example, the title:\n        modalConfig: {title: getString('addresses:newaddress', 'local_shopping_cart')},\n        // DOM element that should get the focus after the modal dialogue is closed:\n        returnFocus: button,\n        saveButtonText: getString('addresses:newaddress:submit', 'local_shopping_cart')\n    });\n    // Listen to events if you want to execute something on form submit.\n    // Event detail will contain everything the process() function returned:\n    modalForm.addEventListener(modalForm.events.FORM_SUBMITTED, (e) => {\n        const response = e.detail;\n        // eslint-disable-next-line no-console\n        console.log('newAddressModal response: ', response);\n        getString('addresses:newaddress:saved', 'local_shopping_cart').then(str => {\n            showNotification(str, 'info');\n            return null;\n        }).catch((e) => {\n            // eslint-disable-next-line no-console\n            console.log(e);\n        });\n        redrawRenderedAddresses(response.templatedata);\n    });\n\n    modalForm.show();\n}\n\n/**\n * Re-Renders the address list with the newly returned data (most possible containing new saved addresses)\n * @param {Array} data data from addresses::get_template_render_data needed for rendering the address.mustache template\n */\nfunction redrawRenderedAddresses(data) {\n    Templates.renderForPromise('local_shopping_cart/address', data).then(({html, js}) => {\n        Templates.replaceNodeContents(document.querySelector(SELECTORS.ADDRESSRENDERCONTAINER), html, js);\n        // Dispatch a custom event after rendering the addresses\n        const event = new CustomEvent('local_shopping_cart/addressesRedrawn', {});\n        document.dispatchEvent(event);\n        return null;\n    }).catch((e) => {\n        // eslint-disable-next-line no-console\n        console.log(e);\n    });\n}\n"],"names":["_interopRequireDefault","e","__esModule","default","_modalform","_templates","SELECTORS","ADDRESSRENDERCONTAINER","NEWADDRESSBUTTON","newAddressModal","button","console","log","modalForm","ModalForm","formClass","args","modalConfig","title","getString","returnFocus","saveButtonText","addEventListener","events","FORM_SUBMITTED","response","detail","data","then","str","showNotification","catch","templatedata","Templates","renderForPromise","_ref","html","js","replaceNodeContents","document","querySelector","event","CustomEvent","dispatchEvent","show","_exports","init","buttons","querySelectorAll","forEach","newAddressButton","preventDefault"],"mappings":"qMAyBuC,SAAAA,uBAAAC,GAAAA,OAAAA,GAAAA,EAAAC,WAAAD,EAAAE,CAAAA,QAAAF,EAAA;;;;;2HAHvCG,WAAAJ,uBAAAI,YAGAC,WAAAL,uBAAAK,YAEA,MAAMC,UAAY,CACdC,uBAAwB,0BACxBC,iBAAkB,8BAuBf,SAASC,gBAAgBC,QAG5BC,QAAQC,IAAI,mBAEZ,MAAMC,UAAY,IAAIC,WAAAA,QAAU,CAG5BC,UAAW,+CAEXC,KAAM,CAAE,EAERC,YAAa,CAACC,OAAO,EAAAC,KAAAA,YAAU,uBAAwB,wBAEvDC,YAAaV,OACbW,gBAAgB,EAAAF,KAAAA,YAAU,8BAA+B,yBAI7DN,UAAUS,iBAAiBT,UAAUU,OAAOC,gBAAiBvB,IACzD,MAAMwB,SAAWxB,EAAEyB,OAoB3B,IAAiCC,KAlBzBhB,QAAQC,IAAI,6BAA8Ba,WAC1C,EAAAN,KAAAA,YAAU,6BAA8B,uBAAuBS,MAAKC,OAChE,EAAAC,eAAgBA,kBAACD,IAAK,QACf,QACRE,OAAO9B,IAENU,QAAQC,IAAIX,EAAE,IAYO0B,KAVDF,SAASO,aAWrCC,WAAS9B,QAAC+B,iBAAiB,8BAA+BP,MAAMC,MAAKO,OAAgB,IAAfC,KAACA,KAAIC,GAAEA,IAAGF,KAC5EF,WAAAA,QAAUK,oBAAoBC,SAASC,cAAclC,UAAUC,wBAAyB6B,KAAMC,IAE9F,MAAMI,MAAQ,IAAIC,YAAY,uCAAwC,CAAE,GAExE,OADAH,SAASI,cAAcF,OAChB,IAAI,IACZV,OAAO9B,IAENU,QAAQC,IAAIX,EAAE,GAnBgC,IAGlDY,UAAU+B,MACd,CAxCEC,SAAAC,KAdkBA,KAEhBnC,QAAQC,IAAI,YAEZ,MAAMmC,QAAUR,SAASS,iBAAiB1C,UAAUE,kBAChDuC,SACAA,QAAQE,SAAQC,mBACZA,iBAAiB5B,iBAAiB,SAASrB,IACvCA,EAAEkD,iBACF1C,gBAAgByC,iBAAiB,GACnC,GAEV,CA2DH"}