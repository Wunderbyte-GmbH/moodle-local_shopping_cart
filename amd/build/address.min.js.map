{"version":3,"file":"address.min.js","sources":["../src/address.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/*\n * @package    local_shopping_cart\n * @copyright  Wunderbyte GmbH <info@wunderbyte.at>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport {showNotification} from 'local_shopping_cart/notifications';\nimport ModalForm from 'core_form/modalform';\n\nimport {get_string as getString} from 'core/str';\nimport Templates from 'core/templates';\n\nconst SELECTORS = {\n    ADDRESSRENDERCONTAINER: '#addressestemplatespace',\n    NEWADDRESSBUTTON: '.shopping-cart-new-address',\n    EDITADDRESSBUTTON: '.shopping-cart-edit-selected-address',\n    DELETESELECTEDADDRESS: '.shopping-cart-delete-selected-address',\n};\n\nexport const init = () => {\n    const buttons = document.querySelectorAll(SELECTORS.NEWADDRESSBUTTON);\n    if (buttons) {\n        buttons.forEach(newAddressButton => {\n            newAddressButton.addEventListener('click', e => {\n                e.preventDefault();\n                newAddressModal(newAddressButton);\n            });\n        });\n    }\n    setDeletionEventListeners();\n    setEditEventListeners();\n};\n\n/**\n * Show Modal.\n */\nexport function setDeletionEventListeners() {\n    const deleteAddressButtons = document.querySelectorAll(SELECTORS.DELETESELECTEDADDRESS);\n    if (deleteAddressButtons) {\n        deleteAddressButtons.forEach(deleteAddressButton => {\n            deleteAddressButton.addEventListener('click', e => {\n                handleAddressDeletion(e, deleteAddressButton);\n            });\n        });\n    }\n}\n\n/**\n * Show Modal.\n */\nexport function setEditEventListeners() {\n    const editAddressButtons = document.querySelectorAll(SELECTORS.EDITADDRESSBUTTON);\n    if (editAddressButtons) {\n        editAddressButtons.forEach(editAddressButton => {\n            editAddressButton.addEventListener('click', e => {\n                let selectedRadio = document.querySelector(\n                    `input[name^=\"selectedaddress_\"]:checked`\n                );\n                e.preventDefault();\n                editAddressButton.setAttribute('data-address-id', selectedRadio.value);\n                newAddressModal(editAddressButton);\n            });\n        });\n    }\n}\n\n/**\n * Show Modal.\n * @param {Event} event\n * @param {HTMLElement} deleteAddressButton\n */\nexport function handleAddressDeletion(event, deleteAddressButton) {\n    event.preventDefault();\n    const selectedradio = document.querySelector(\n        `input[name^=\"selectedaddress_\"]:checked`\n    );\n    if (selectedradio) {\n        const addressId = selectedradio.value;\n        confirmAndDeleteAddress(addressId, deleteAddressButton);\n    } else {\n        getString('addresses:delete:noaddressselected', 'local_shopping_cart').then(str => {\n            showNotification(str, 'warning');\n            return;\n        }).catch(\n            // eslint-disable-next-line no-console\n            console.error\n        );\n    }\n}\n\n/**\n * Show a confirmation modal and trigger the address deletion process.\n * @param {string} addressId\n * @param {string} button\n */\nfunction confirmAndDeleteAddress(addressId, button) {\n\n    const modalForm = new ModalForm({\n        formClass: \"local_shopping_cart\\\\form\\\\delete_user_address\",\n        args: {addressid: addressId},\n        modalConfig: {\n            title: getString('addresses:delete:selected', 'local_shopping_cart'),\n        },\n        returnFocus: button,\n        saveButtonText: getString('addresses:delete:submit', 'local_shopping_cart')\n    });\n\n    modalForm.addEventListener(modalForm.events.FORM_SUBMITTED, (e) => {\n        deselectAddressCheckbox(button.dataset.addresskey);\n        const response = e.detail;\n        deleteAddress(response);\n        redrawRenderedAddresses(response.templatedata);\n    });\n\n    modalForm.show();\n    return;\n}\n\n/**\n * @param {String} addressType\n */\nfunction deselectAddressCheckbox(addressType) {\n    const selectedRadio = document.querySelector(`input[name=\"selectedaddress_${addressType}\"]:checked`);\n    if (selectedRadio) {\n        selectedRadio.checked = false;\n        const event = new Event('change', {bubbles: true});\n        selectedRadio.dispatchEvent(event);\n    }\n}\n\n/**\n * Trigger the address deletion via a web service.\n * @param {string} response\n */\nfunction deleteAddress(response) {\n    if (response == 1) {\n\n        getString('addresses:delete:success', 'local_shopping_cart').then(successMessage => {\n            showNotification(successMessage, 'success');\n            return;\n        }).catch(\n            // eslint-disable-next-line no-console\n            console.error\n        );\n    } else {\n        getString('addresses:delete:error', 'local_shopping_cart').then(successMessage => {\n            showNotification(successMessage, 'error');\n            return;\n        }).catch(\n            // eslint-disable-next-line no-console\n            console.error\n        );\n    }\n}\n\n/**\n * Show Modal.\n * @param {htmlElement} button\n */\nexport function newAddressModal(button) {\n    // Detect if we are editing an existing address via the button's dataset or other relevant data.\n    const id = button.dataset.addressId ?? 0;\n\n    // Set the save button text based on whether the address is being edited or added.\n    const saveButtonText = id > 0\n        ? getString('addresses:saveaddress:submit', 'local_shopping_cart') // Change \"Add Address\" to \"Save Address\" for edits.\n        : getString('addresses:newaddress:submit', 'local_shopping_cart'); // Default text for adding.\n\n    const modalForm = new ModalForm({\n        // Name of the class where the form is defined (must extend \\core_form\\dynamic_form):\n        formClass: \"local_shopping_cart\\\\form\\\\modal_new_address\",\n        // Pass arguments to indicate the state of the modal (new or edit):\n        args: {id},\n        // Configure the modal dialog with the updated save button text:\n        modalConfig: {title: getString('addresses:newaddress', 'local_shopping_cart')},\n        // DOM element that should get focus after the modal dialog is closed:\n        returnFocus: button,\n        saveButtonText: saveButtonText\n    });\n\n    // Listen to form submission events.\n    modalForm.addEventListener(modalForm.events.FORM_SUBMITTED, (e) => {\n        const response = e.detail;\n\n        // Determine the key to use based on whether the response is for a new or updated address.\n        const stringKey = response.isnew\n            ? 'addresses:newaddress:saved' // String for new address saved.\n            : 'addresses:newaddress:updated'; // String for updated address.\n\n        // Get the appropriate string and show the notification.\n        getString(stringKey, 'local_shopping_cart')\n            .then(str => {\n                showNotification(str, 'info');\n                return null;\n            })\n            .catch((error) => {\n                console.log(error); // eslint-disable-line no-console\n            });\n\n        // Redraw the rendered addresses list based on the server response.\n        redrawRenderedAddresses(response.templatedata);\n    });\n\n\n    modalForm.show();\n}\n\n\n/**\n * Re-Renders the address list with the newly returned data (most possible containing new saved addresses)\n * @param {Array} data data from addresses::get_template_render_data needed for rendering the address.mustache template\n */\nfunction redrawRenderedAddresses(data) {\n    Templates.renderForPromise('local_shopping_cart/address', data).then(({html, js}) => {\n        Templates.replaceNodeContents(document.querySelector(SELECTORS.ADDRESSRENDERCONTAINER), html, js);\n        const event = new CustomEvent('local_shopping_cart/addressesRedrawn', {});\n        document.dispatchEvent(event);\n        return null;\n    }).catch((e) => {\n        // eslint-disable-next-line no-console\n        console.log(e);\n    });\n}\n"],"names":["SELECTORS","setDeletionEventListeners","deleteAddressButtons","document","querySelectorAll","forEach","deleteAddressButton","addEventListener","e","handleAddressDeletion","setEditEventListeners","editAddressButtons","editAddressButton","selectedRadio","querySelector","preventDefault","setAttribute","value","newAddressModal","event","selectedradio","addressId","button","modalForm","ModalForm","formClass","args","addressid","modalConfig","title","returnFocus","saveButtonText","events","FORM_SUBMITTED","addressType","checked","Event","bubbles","dispatchEvent","deselectAddressCheckbox","dataset","addresskey","response","detail","then","successMessage","catch","console","error","deleteAddress","redrawRenderedAddresses","templatedata","show","confirmAndDeleteAddress","str","id","stringKey","isnew","log","data","renderForPromise","_ref","html","js","replaceNodeContents","CustomEvent","buttons","newAddressButton"],"mappings":";;;;;oYA2BMA,iCACsB,0BADtBA,2BAEgB,6BAFhBA,4BAGiB,uCAHjBA,gCAIqB,kDAoBXC,kCACNC,qBAAuBC,SAASC,iBAAiBJ,iCACnDE,sBACAA,qBAAqBG,SAAQC,sBACzBA,oBAAoBC,iBAAiB,SAASC,IAC1CC,sBAAsBD,EAAGF,oCASzBI,8BACNC,mBAAqBR,SAASC,iBAAiBJ,6BACjDW,oBACAA,mBAAmBN,SAAQO,oBACvBA,kBAAkBL,iBAAiB,SAASC,QACpCK,cAAgBV,SAASW,yDAG7BN,EAAEO,iBACFH,kBAAkBI,aAAa,kBAAmBH,cAAcI,OAChEC,gBAAgBN,kCAWhBH,sBAAsBU,MAAOb,qBACzCa,MAAMJ,uBACAK,cAAgBjB,SAASW,4DAG3BM,cAAe,WAmBUC,UAAWC,cAElCC,UAAY,IAAIC,mBAAU,CAC5BC,UAAW,iDACXC,KAAM,CAACC,UAAWN,WAClBO,YAAa,CACTC,OAAO,mBAAU,4BAA6B,wBAElDC,YAAaR,OACbS,gBAAgB,mBAAU,0BAA2B,yBAGzDR,UAAUhB,iBAAiBgB,UAAUS,OAAOC,gBAAiBzB,cAchC0B,mBACvBrB,cAAgBV,SAASW,oDAA6CoB,8BACxErB,cAAe,CACfA,cAAcsB,SAAU,QAClBhB,MAAQ,IAAIiB,MAAM,SAAU,CAACC,SAAS,IAC5CxB,cAAcyB,cAAcnB,QAlB5BoB,CAAwBjB,OAAOkB,QAAQC,kBACjCC,SAAWlC,EAAEmC,iBAyBJD,UACH,GAAZA,6BAEU,2BAA4B,uBAAuBE,MAAKC,qDAC7CA,eAAgB,cAElCC,MAECC,QAAQC,2BAGF,yBAA0B,uBAAuBJ,MAAKC,qDAC3CA,eAAgB,YAElCC,MAECC,QAAQC,OAxCZC,CAAcP,UACdQ,wBAAwBR,SAASS,iBAGrC5B,UAAU6B,OApCNC,CADkBjC,cAAcH,MACGX,6CAEzB,qCAAsC,uBAAuBsC,MAAKU,0CACvDA,IAAK,cAEvBR,MAECC,QAAQC,gBA0EJ9B,gBAAgBI,wCAEtBiC,iCAAKjC,OAAOkB,QAAQnB,iEAAa,EAGjCU,eAAiBwB,GAAK,GACtB,mBAAU,+BAAgC,wBAC1C,mBAAU,8BAA+B,uBAEzChC,UAAY,IAAIC,mBAAU,CAE5BC,UAAW,+CAEXC,KAAM,CAAC6B,GAAAA,IAEP3B,YAAa,CAACC,OAAO,mBAAU,uBAAwB,wBAEvDC,YAAaR,OACbS,eAAgBA,iBAIpBR,UAAUhB,iBAAiBgB,UAAUS,OAAOC,gBAAiBzB,UACnDkC,SAAWlC,EAAEmC,OAGba,UAAYd,SAASe,MACrB,6BACA,mDAGID,UAAW,uBAChBZ,MAAKU,0CACeA,IAAK,QACf,QAEVR,OAAOE,QACJD,QAAQW,IAAIV,UAIpBE,wBAAwBR,SAASS,iBAIrC5B,UAAU6B,gBAQLF,wBAAwBS,yBACnBC,iBAAiB,8BAA+BD,MAAMf,MAAKiB,WAACC,KAACA,KAADC,GAAOA,4BAC/DC,oBAAoB7D,SAASW,cAAcd,kCAAmC8D,KAAMC,UACxF5C,MAAQ,IAAI8C,YAAY,uCAAwC,WACtE9D,SAASmC,cAAcnB,OAChB,QACR2B,OAAOtC,IAENuC,QAAQW,IAAIlD,oBAzMA,WACV0D,QAAU/D,SAASC,iBAAiBJ,4BACtCkE,SACAA,QAAQ7D,SAAQ8D,mBACZA,iBAAiB5D,iBAAiB,SAASC,IACvCA,EAAEO,iBACFG,gBAAgBiD,wBAI5BlE,4BACAS"}