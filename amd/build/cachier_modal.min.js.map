{"version":3,"sources":["../src/cachier_modal.js"],"names":["registerEventListeners","document","addEventListener","e","gatewayTrigger","target","closest","preventDefault","show","focusOnClose","rootNode","ModalFactory","ModalGateways","TYPE","Templates","render","type","title","body","create","modal","rootElement","getRoot","on","ModalEvents","hidden","destroy","focus","PaymentEvents","proceed","gateway","querySelector","Selectors","values","value","processPayment","dataset","component","paymentarea","itemid","description","then","message","hide","Notification","addNotification","location","href","successurl","catch","alert","matches","elements","gateways","updateCostRegion","cost","context","renderForPromise","html","js","replaceNodeContents","regions","gatewaysContainer","selectSingleGateway","root","querySelectorAll","length","checked","defaultCost","gatewayElement","surcharge","parseInt","fee","costContainer","paymentArea","itemId","paymentMethod","process","init","initialised"],"mappings":"gVAuBA,OACA,OAGA,OACA,OACA,OAEA,OACA,O,geAKMA,CAAAA,CAAsB,CAAG,UAAM,CACjCC,QAAQ,CAACC,gBAAT,CAA0B,OAA1B,CAAmC,SAAAC,CAAC,CAAI,CACpC,GAAMC,CAAAA,CAAc,CAAGD,CAAC,CAACE,MAAF,CAASC,OAAT,CAAiB,+CAAjB,CAAvB,CACA,GAAIF,CAAJ,CAAoB,CAChBD,CAAC,CAACI,cAAF,GAEAC,CAAI,CAACJ,CAAD,CAAiB,CAACK,YAAY,CAAEN,CAAC,CAACE,MAAjB,CAAjB,CACP,CACJ,CAPD,CAQH,C,CASKG,CAAI,4CAAG,WAAME,CAAN,wJAET,EAFS,KACTD,YADS,CACTA,CADS,YACM,IADN,QAGWE,SAHX,MAICC,UAAcC,IAJf,gBAKQ,iBAAU,mBAAV,CAA+B,cAA/B,CALR,mCAMOC,WAAUC,MAAV,CAAiB,6BAAjB,CAAgD,EAAhD,CANP,0BAILC,IAJK,MAKLC,KALK,MAMLC,IANK,6BAGwBC,MAHxB,yBAGHC,CAHG,QASHC,CATG,CASWD,CAAK,CAACE,OAAN,GAAgB,CAAhB,CATX,CAUT,qBAAeD,CAAf,EAEAD,CAAK,CAACZ,IAAN,GAEAY,CAAK,CAACE,OAAN,GAAgBC,EAAhB,CAAmBC,UAAYC,MAA/B,CAAuC,UAAM,CAEzCL,CAAK,CAACM,OAAN,GACA,GAAI,CACAjB,CAAY,CAACkB,KAAb,EACH,CAAC,MAAOxB,CAAP,CAAU,CAEX,CACJ,CARD,EAUAiB,CAAK,CAACE,OAAN,GAAgBC,EAAhB,CAAmBK,UAAcC,OAAjC,CAA0C,SAAC1B,CAAD,CAAO,CAC7C,GAAM2B,CAAAA,CAAO,CAAG,CAACT,CAAW,CAACU,aAAZ,CAA0BC,UAAUC,MAAV,CAAiBH,OAA3C,GAAuD,CAACI,KAAK,CAAE,EAAR,CAAxD,EAAqEA,KAArF,CAEA,GAAIJ,CAAJ,CAAa,CACTK,CAAc,CACVL,CADU,CAEVpB,CAAQ,CAAC0B,OAAT,CAAiBC,SAFP,CAGV3B,CAAQ,CAAC0B,OAAT,CAAiBE,WAHP,CAIV5B,CAAQ,CAAC0B,OAAT,CAAiBG,MAJP,CAKV7B,CAAQ,CAAC0B,OAAT,CAAiBI,WALP,CAAd,CAOCC,IAPD,CAOM,SAAAC,CAAO,CAAI,CACbtB,CAAK,CAACuB,IAAN,GACAC,UAAaC,eAAb,CAA6B,CACzBH,OAAO,CAAEA,CADgB,CAEzB1B,IAAI,CAAE,SAFmB,CAA7B,EAIA8B,QAAQ,CAACC,IAAT,CAAgBrC,CAAQ,CAAC0B,OAAT,CAAiBY,UAAjC,CAGA,MAAON,CAAAA,CACV,CAjBD,EAkBCO,KAlBD,CAkBO,SAAAP,CAAO,QAAIE,WAAaM,KAAb,CAAmB,EAAnB,CAAuBR,CAAvB,CAAJ,CAlBd,CAmBH,CApBD,IAoBO,CAIH,iBAAU,mBAAV,CAA+B,cAA/B,EAA+CD,IAA/C,CAAoD,SAAAC,CAAO,QAAI,UAASA,CAAT,CAAkB,CAAC1B,IAAI,CAAE,SAAP,CAAlB,CAAJ,CAA3D,EAAqGiC,KAArG,EACH,CAED9C,CAAC,CAACI,cAAF,EACH,CA/BD,EAkCAc,CAAW,CAACnB,gBAAZ,CAA6B,QAA7B,CAAuC,SAAAC,CAAC,CAAI,CACxC,GAAIA,CAAC,CAACE,MAAF,CAAS8C,OAAT,CAAiBnB,UAAUoB,QAAV,CAAmBC,QAApC,CAAJ,CAAmD,CAC/CC,CAAgB,CAACjC,CAAD,CAAcX,CAAQ,CAAC0B,OAAT,CAAiBmB,IAA/B,CACnB,CACJ,CAJD,EA1DS,gBAgEc,2BAAqB7C,CAAQ,CAAC0B,OAAT,CAAiBC,SAAtC,CAAiD3B,CAAQ,CAAC0B,OAAT,CAAiBE,WAAlE,CAA+E5B,CAAQ,CAAC0B,OAAT,CAAiBG,MAAhG,CAhEd,SAgEHc,CAhEG,QAiEHG,CAjEG,CAiEO,CACZH,QAAQ,CAARA,CADY,CAjEP,iBAqEgBvC,WAAU2C,gBAAV,CAA2B,uBAA3B,CAAoDD,CAApD,CArEhB,kBAqEFE,CArEE,GAqEFA,IArEE,CAqEIC,CArEJ,GAqEIA,EArEJ,CAsET7C,UAAU8C,mBAAV,CAA8BvC,CAAW,CAACU,aAAZ,CAA0BC,UAAU6B,OAAV,CAAkBC,iBAA5C,CAA9B,CAA8FJ,CAA9F,CAAoGC,CAApG,EACAI,CAAmB,CAAC1C,CAAD,CAAnB,CAvES,gBAwEHiC,CAAAA,CAAgB,CAACjC,CAAD,CAAcX,CAAQ,CAAC0B,OAAT,CAAiBmB,IAA/B,CAxEb,0CAAH,uD,CAgFJQ,CAAmB,CAAG,SAAAC,CAAI,CAAI,CAChC,GAAMX,CAAAA,CAAQ,CAAGW,CAAI,CAACC,gBAAL,CAAsBjC,UAAUoB,QAAV,CAAmBC,QAAzC,CAAjB,CAEA,GAAuB,CAAnB,EAAAA,CAAQ,CAACa,MAAb,CAA0B,CACtBb,CAAQ,CAAC,CAAD,CAAR,CAAYc,OAAZ,GACH,CACJ,C,CASKb,CAAgB,4CAAG,WAAMU,CAAN,iHAAYI,CAAZ,gCAA0B,EAA1B,CACfC,CADe,CACEL,CAAI,CAACjC,aAAL,CAAmBC,UAAUC,MAAV,CAAiBH,OAApC,CADF,CAEfwC,CAFe,CAEHC,QAAQ,CAAC,CAACF,CAAc,EAAI,CAACjC,OAAO,CAAE,CAACkC,SAAS,CAAE,CAAZ,CAAV,CAAnB,EAA8ClC,OAA9C,CAAsDkC,SAAvD,CAFL,CAGff,CAHe,CAGR,CAACc,CAAc,EAAI,CAACjC,OAAO,CAAE,CAACmB,IAAI,CAAEa,CAAP,CAAV,CAAnB,EAAmDhC,OAAnD,CAA2DmB,IAHnD,gBAKIzC,WAAU2C,gBAAV,CAA2B,4BAA3B,CAAyD,CAACe,GAAG,CAAEjB,CAAN,CAAYe,SAAS,CAATA,CAAZ,CAAzD,CALJ,iBAKdZ,CALc,GAKdA,IALc,CAKRC,CALQ,GAKRA,EALQ,CAMrB7C,UAAU8C,mBAAV,CAA8BI,CAAI,CAACjC,aAAL,CAAmBC,UAAU6B,OAAV,CAAkBY,aAArC,CAA9B,CAAmFf,CAAnF,CAAyFC,CAAzF,EANqB,yCAAH,uD,CAmBhBxB,CAAc,4CAAG,WAAML,CAAN,CAAeO,CAAf,CAA0BqC,CAA1B,CAAuCC,CAAvC,CAA+CnC,CAA/C,uMACyBV,CADzB,sOACyBA,CADzB,yDACyBA,CADzB,6BACb8C,CADa,iCAEZA,CAAa,CAACC,OAAd,CAAsBxC,CAAtB,CAAiCqC,CAAjC,CAA8CC,CAA9C,CAAsDnC,CAAtD,CAFY,0CAAH,uD,CAQPsC,CAAI,CAAG,UAAM,CACtB,GAAI,CAACA,CAAI,CAACC,WAAV,CAAuB,CAEnBD,CAAI,CAACC,WAAL,IACA/E,CAAsB,EACzB,CACJ,C,UAQD8E,CAAI,CAACC,WAAL,G","sourcesContent":["// This file is part of Moodle - http://moodle.org/\r\n//\r\n// Moodle is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// Moodle is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU General Public License\r\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\n/**\r\n * Contain the logic for the gateways modal.\r\n *\r\n * @module     core_payment/gateways_modal\r\n * @copyright  2019 Shamim Rezaie <shamim@moodle.com>\r\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\r\n */\r\n\r\nimport ModalFactory from 'core/modal_factory';\r\nimport Templates from 'core/templates';\r\nimport {get_string as getString} from 'core/str';\r\nimport {getAvailableGateways} from './repository';\r\nimport Selectors from './selectors';\r\nimport ModalEvents from 'core/modal_events';\r\nimport PaymentEvents from 'core_payment/events';\r\nimport {add as addToast, addToastRegion} from 'core/toast';\r\nimport Notification from 'core/notification';\r\nimport ModalGateways from './modal_gateways';\r\n\r\n/**\r\n * Register event listeners for the module.\r\n */\r\nconst registerEventListeners = () => {\r\n    document.addEventListener('click', e => {\r\n        const gatewayTrigger = e.target.closest('[data-action=\"core_payment/triggerPayment\"]');\r\n        if (gatewayTrigger) {\r\n            e.preventDefault();\r\n\r\n            show(gatewayTrigger, {focusOnClose: e.target});\r\n        }\r\n    });\r\n};\r\n\r\n/**\r\n * Shows the gateway selector modal.\r\n *\r\n * @param {HTMLElement} rootNode\r\n * @param {Object} options - Additional options\r\n * @param {HTMLElement} options.focusOnClose The element to focus on when the modal is closed.\r\n */\r\nconst show = async(rootNode, {\r\n    focusOnClose = null,\r\n} = {}) => {\r\n    const modal = await ModalFactory.create({\r\n        type: ModalGateways.TYPE,\r\n        title: await getString('selectpaymenttype', 'core_payment'),\r\n        body: await Templates.render('core_payment/gateways_modal', {}),\r\n    });\r\n\r\n    const rootElement = modal.getRoot()[0];\r\n    addToastRegion(rootElement);\r\n\r\n    modal.show();\r\n\r\n    modal.getRoot().on(ModalEvents.hidden, () => {\r\n        // Destroy when hidden.\r\n        modal.destroy();\r\n        try {\r\n            focusOnClose.focus();\r\n        } catch (e) {\r\n            // eslint-disable-line\r\n        }\r\n    });\r\n\r\n    modal.getRoot().on(PaymentEvents.proceed, (e) => {\r\n        const gateway = (rootElement.querySelector(Selectors.values.gateway) || {value: ''}).value;\r\n\r\n        if (gateway) {\r\n            processPayment(\r\n                gateway,\r\n                rootNode.dataset.component,\r\n                rootNode.dataset.paymentarea,\r\n                rootNode.dataset.itemid,\r\n                rootNode.dataset.description\r\n            )\r\n            .then(message => {\r\n                modal.hide();\r\n                Notification.addNotification({\r\n                    message: message,\r\n                    type: 'success',\r\n                });\r\n                location.href = rootNode.dataset.successurl;\r\n\r\n                // The following return statement is never reached. It is put here just to make eslint happy.\r\n                return message;\r\n            })\r\n            .catch(message => Notification.alert('', message));\r\n        } else {\r\n            // We cannot use await in the following line.\r\n            // The reason is that we are preventing the default action of the save event being triggered,\r\n            // therefore we cannot define the event handler function asynchronous.\r\n            getString('nogatewayselected', 'core_payment').then(message => addToast(message, {type: 'warning'})).catch();\r\n        }\r\n\r\n        e.preventDefault();\r\n    });\r\n\r\n    // Re-calculate the cost when gateway is changed.\r\n    rootElement.addEventListener('change', e => {\r\n        if (e.target.matches(Selectors.elements.gateways)) {\r\n            updateCostRegion(rootElement, rootNode.dataset.cost);\r\n        }\r\n    });\r\n\r\n    const gateways = await getAvailableGateways(rootNode.dataset.component, rootNode.dataset.paymentarea, rootNode.dataset.itemid);\r\n    const context = {\r\n        gateways\r\n    };\r\n\r\n    const {html, js} = await Templates.renderForPromise('core_payment/gateways', context);\r\n    Templates.replaceNodeContents(rootElement.querySelector(Selectors.regions.gatewaysContainer), html, js);\r\n    selectSingleGateway(rootElement);\r\n    await updateCostRegion(rootElement, rootNode.dataset.cost);\r\n};\r\n\r\n/**\r\n * Auto-select the gateway if there is only one gateway.\r\n *\r\n * @param {HTMLElement} root An HTMLElement that contains the cost region\r\n */\r\nconst selectSingleGateway = root => {\r\n    const gateways = root.querySelectorAll(Selectors.elements.gateways);\r\n\r\n    if (gateways.length == 1) {\r\n        gateways[0].checked = true;\r\n    }\r\n};\r\n\r\n/**\r\n * Shows the cost of the item the user is purchasing in the cost region.\r\n *\r\n * @param {HTMLElement} root An HTMLElement that contains the cost region\r\n * @param {string} defaultCost The default cost that is going to be displayed if no gateway is selected\r\n * @returns {Promise<void>}\r\n */\r\nconst updateCostRegion = async(root, defaultCost = '') => {\r\n    const gatewayElement = root.querySelector(Selectors.values.gateway);\r\n    const surcharge = parseInt((gatewayElement || {dataset: {surcharge: 0}}).dataset.surcharge);\r\n    const cost = (gatewayElement || {dataset: {cost: defaultCost}}).dataset.cost;\r\n\r\n    const {html, js} = await Templates.renderForPromise('core_payment/fee_breakdown', {fee: cost, surcharge});\r\n    Templates.replaceNodeContents(root.querySelector(Selectors.regions.costContainer), html, js);\r\n};\r\n\r\n/**\r\n * Process payment using the selected gateway.\r\n *\r\n * @param {string} gateway The gateway to be used for payment\r\n * @param {string} component Name of the component that the itemId belongs to\r\n * @param {string} paymentArea Name of the area in the component that the itemId belongs to\r\n * @param {number} itemId An internal identifier that is used by the component\r\n * @param {string} description Description of the payment\r\n * @returns {Promise<string>}\r\n */\r\nconst processPayment = async(gateway, component, paymentArea, itemId, description) => {\r\n    const paymentMethod = await import(`paygw_${gateway}/gateways_modal`);\r\n    return paymentMethod.process(component, paymentArea, itemId, description);\r\n};\r\n\r\n/**\r\n * Set up the payment actions.\r\n */\r\nexport const init = () => {\r\n    if (!init.initialised) {\r\n        // Event listeners should only be registered once.\r\n        init.initialised = true;\r\n        registerEventListeners();\r\n    }\r\n};\r\n\r\n/**\r\n * Whether the init function was called before.\r\n *\r\n * @static\r\n * @type {boolean}\r\n */\r\ninit.initialised = false;\r\n"],"file":"cachier_modal.min.js"}