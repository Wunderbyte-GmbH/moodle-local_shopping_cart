{"version":3,"file":"form_users_selector.min.js","sources":["../src/form_users_selector.js"],"sourcesContent":["// This file is part of Moodle - https://moodle.org/\r\n//\r\n// Moodle is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// Moodle is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU General Public License\r\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\n/**\r\n * Provides the required functionality for an autocomplete element to select a user.\r\n *\r\n * @module      local_shopping_cart/form_users_selector\r\n * @copyright   2022 Thomas Winkler\r\n * @license     http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\r\n */\r\n\r\nimport Ajax from \"core/ajax\";\r\nimport {render as renderTemplate} from \"core/templates\";\r\n\r\n/**\r\n * Load the list of users matching the query and render the selector labels for them.\r\n *\r\n * @param {String} selector The selector of the auto complete element.\r\n * @param {String} query The query string.\r\n * @param {Function} callback A callback function receiving an array of results.\r\n * @param {Function} failure A function to call in case of failure, receiving the error message.\r\n */\r\nexport async function transport(selector, query, callback, failure) {\r\n    const request = {\r\n        methodname: \"local_shopping_cart_search_users\",\r\n        args: {\r\n            query: query,\r\n        },\r\n    };\r\n\r\n    try {\r\n        const response = await Ajax.call([request])[0];\r\n\r\n        let labels = [];\r\n\r\n        // eslint-disable-next-line no-console\r\n        console.log(response);\r\n\r\n        if (response.warnings.length > 0) {\r\n            callback(response.warnings);\r\n        } else {\r\n            response.list.forEach((user) => {\r\n                labels.push(\r\n                    renderTemplate(\r\n                        \"local_shopping_cart/form-user-selector-suggestion\",\r\n                        user\r\n                    )\r\n                );\r\n            });\r\n            labels = await Promise.all(labels);\r\n\r\n            response.list.forEach((entity, index) => {\r\n                entity.label = labels[index];\r\n            });\r\n            callback(response.list);\r\n        }\r\n    } catch (e) {\r\n        failure(e);\r\n    }\r\n}\r\n\r\n/**\r\n * Process the results for auto complete elements.\r\n *\r\n * @param {String} selector The selector of the auto complete element.\r\n * @param {Array} results An array or results returned by {@see transport()}.\r\n * @return {Array} New array of the selector options.\r\n */\r\nexport function processResults(selector, results) {\r\n    if (!Array.isArray(results)) {\r\n        return results;\r\n    } else {\r\n        return results.map((result) => ({value: result.id, label: result.label}));\r\n    }\r\n}\r\n"],"names":["selector","results","Array","isArray","map","result","value","id","label","query","callback","failure","request","methodname","args","response","Ajax","call","labels","console","log","warnings","length","list","forEach","user","push","Promise","all","entity","index","e"],"mappings":";;;;;;;8FAgF+BA,SAAUC,gBAChCC,MAAMC,QAAQF,SAGRA,QAAQG,KAAKC,UAAaC,MAAOD,OAAOE,GAAIC,MAAOH,OAAOG,UAF1DP,2CAhDiBD,SAAUS,MAAOC,SAAUC,eACjDC,QAAU,CACZC,WAAY,mCACZC,KAAM,CACFL,MAAOA,kBAKLM,eAAiBC,cAAKC,KAAK,CAACL,UAAU,OAExCM,OAAS,GAGbC,QAAQC,IAAIL,UAERA,SAASM,SAASC,OAAS,EAC3BZ,SAASK,SAASM,WAElBN,SAASQ,KAAKC,SAASC,OACnBP,OAAOQ,MACH,qBACI,oDACAD,UAIZP,aAAeS,QAAQC,IAAIV,QAE3BH,SAASQ,KAAKC,SAAQ,CAACK,OAAQC,SAC3BD,OAAOrB,MAAQU,OAAOY,UAE1BpB,SAASK,SAASQ,OAExB,MAAOQ,GACLpB,QAAQoB"}