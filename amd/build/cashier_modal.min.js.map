{"version":3,"file":"cashier_modal.min.js","sources":["../src/cashier_modal.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Contain the logic for the gateways modal.\n *\n * @module     core_payment/gateways_modal\n * @copyright  Wunderbyte GmbH <info@wunderbyte.at>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport ModalFactory from 'core/modal_factory';\nimport Templates from 'core/templates';\nimport {get_string as getString} from 'core/str';\nimport {getAvailableGateways} from './repository';\nimport Selectors from './selectors';\nimport ModalEvents from 'core/modal_events';\nimport PaymentEvents from 'core_payment/events';\nimport {add as addToast, addToastRegion} from 'core/toast';\nimport {showNotification} from 'local_shopping_cart/notifications';\nimport ModalGateways from './modal_gateways';\nimport Notification from 'core/notification';\n\n/**\n * Register event listeners for the module.\n */\nconst registerEventListeners = () => {\n    document.addEventListener('click', e => {\n        const gatewayTrigger = e.target.closest('[data-action=\"core_payment/triggerPayment\"]');\n        if (gatewayTrigger) {\n            e.preventDefault();\n\n            show(gatewayTrigger, {focusOnClose: e.target});\n        }\n    });\n};\n\n/**\n * Shows the gateway selector modal.\n *\n * @param {HTMLElement} rootNode\n * @param {Object} options - Additional options\n * @param {HTMLElement} options.focusOnClose The element to focus on when the modal is closed.\n */\nconst show = async(rootNode, {\n    focusOnClose = null,\n} = {}) => {\n    const modal = await ModalFactory.create({\n        type: ModalGateways.TYPE,\n        title: await getString('selectpaymenttype', 'core_payment'),\n        body: await Templates.render('core_payment/gateways_modal', {}),\n    });\n    // eslint-disable-next-line no-console\n    console.log('initt23432532532tt');\n\n    const rootElement = modal.getRoot()[0];\n    addToastRegion(rootElement);\n\n    modal.show();\n\n    modal.getRoot().on(ModalEvents.hidden, () => {\n        // Destroy when hidden.\n        modal.destroy();\n        try {\n            focusOnClose.focus();\n        } catch (e) {\n            // eslint-disable-next-line no-console\n            console.log('error: ', e);\n        }\n    });\n\n    modal.getRoot().on(PaymentEvents.proceed, (e) => {\n        const gateway = (rootElement.querySelector(Selectors.values.gateway) || {value: ''}).value;\n\n        if (gateway) {\n            processPayment(\n                gateway,\n                rootNode.dataset.component,\n                rootNode.dataset.paymentarea,\n                rootNode.dataset.itemid,\n                rootNode.dataset.description\n            )\n            .then(message => {\n                modal.hide();\n                showNotification(message, 'success');\n\n                location.href = rootNode.dataset.successurl;\n\n                // The following return statement is never reached. It is put here just to make eslint happy.\n                return message;\n            })\n            .catch(message => Notification.alert('', message));\n        } else {\n            // We cannot use await in the following line.\n            // The reason is that we are preventing the default action of the save event being triggered,\n            // therefore we cannot define the event handler function asynchronous.\n            // eslint-disable-next-line promise/catch-or-return\n            getString('nogatewayselected', 'core_payment').then(message => addToast(message, {type: 'warning'}));\n        }\n\n        e.preventDefault();\n    });\n\n    // Re-calculate the cost when gateway is changed.\n    rootElement.addEventListener('change', e => {\n        if (e.target.matches(Selectors.elements.gateways)) {\n            updateCostRegion(rootElement, rootNode.dataset.cost);\n        }\n    });\n\n    const gateways = await getAvailableGateways(rootNode.dataset.component, rootNode.dataset.paymentarea, rootNode.dataset.itemid);\n    const context = {\n        gateways\n    };\n\n    const {html, js} = await Templates.renderForPromise('core_payment/gateways', context);\n    Templates.replaceNodeContents(rootElement.querySelector(Selectors.regions.gatewaysContainer), html, js);\n    selectSingleGateway(rootElement);\n    await updateCostRegion(rootElement, rootNode.dataset.cost);\n};\n\n/**\n * Auto-select the gateway if there is only one gateway.\n *\n * @param {HTMLElement} root An HTMLElement that contains the cost region\n */\nconst selectSingleGateway = root => {\n    const gateways = root.querySelectorAll(Selectors.elements.gateways);\n\n    if (gateways.length == 1) {\n        gateways[0].checked = true;\n    }\n};\n\n/**\n * Shows the cost of the item the user is purchasing in the cost region.\n *\n * @param {HTMLElement} root An HTMLElement that contains the cost region\n * @param {string} defaultCost The default cost that is going to be displayed if no gateway is selected\n * @returns {Promise<void>}\n */\nconst updateCostRegion = async(root, defaultCost = '') => {\n    const gatewayElement = root.querySelector(Selectors.values.gateway);\n    const surcharge = parseInt((gatewayElement || {dataset: {surcharge: 0}}).dataset.surcharge);\n    const cost = (gatewayElement || {dataset: {cost: defaultCost}}).dataset.cost;\n\n    const {html, js} = await Templates.renderForPromise('core_payment/fee_breakdown', {fee: cost, surcharge});\n    Templates.replaceNodeContents(root.querySelector(Selectors.regions.costContainer), html, js);\n};\n\n/**\n * Process payment using the selected gateway.\n *\n * @param {string} gateway The gateway to be used for payment\n * @param {string} component Name of the component that the itemId belongs to\n * @param {string} paymentArea Name of the area in the component that the itemId belongs to\n * @param {number} itemId An internal identifier that is used by the component\n * @param {string} description Description of the payment\n * @returns {Promise<string>}\n */\nconst processPayment = async(gateway, component, paymentArea, itemId, description) => {\n    // eslint-disable-next-line no-console\n    console.log('initt23432532532tt');\n    const paymentMethod = await import(`paygw_${gateway}/gateways_modal`);\n    return paymentMethod.process(component, paymentArea, itemId, description);\n};\n\n/**\n * Set up the payment actions.\n */\nexport const init = () => {\n    // eslint-disable-next-line no-console\n    console.log('initt23432532532tt');\n    if (!init.initialised) {\n        // Event listeners should only be registered once.\n        init.initialised = true;\n        registerEventListeners();\n    }\n};\n\n/**\n * Whether the init function was called before.\n *\n * @static\n * @type {boolean}\n */\ninit.initialised = false;\n"],"names":["_modal_factory","_interopRequireDefault","_templates","_selectors","_modal_events","_events","_modal_gateways","_notification","_systemImportTransformerGlobalIdentifier","window","self","global","e","__esModule","default","show","async","rootNode","focusOnClose","arguments","length","undefined","modal","ModalFactory","create","type","ModalGateways","TYPE","title","getString","body","Templates","render","console","log","rootElement","getRoot","addToastRegion","on","ModalEvents","hidden","destroy","focus","PaymentEvents","proceed","gateway","querySelector","Selectors","values","value","processPayment","dataset","component","paymentarea","itemid","description","then","message","hide","showNotification","location","href","successurl","catch","Notification","alert","get_string","addToast","add","preventDefault","addEventListener","target","matches","elements","gateways","updateCostRegion","cost","context","getAvailableGateways","html","js","renderForPromise","replaceNodeContents","regions","gatewaysContainer","selectSingleGateway","root","querySelectorAll","checked","defaultCost","gatewayElement","surcharge","parseInt","fee","costContainer","paymentArea","itemId","define","amd","Promise","resolve","reject","require","module","exports","loader","process","init","initialised","document","gatewayTrigger","closest","_exports"],"mappings":"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"}