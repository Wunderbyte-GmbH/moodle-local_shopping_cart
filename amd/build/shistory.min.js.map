{"version":3,"file":"shistory.min.js","sources":["../src/shistory.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/*\n * @package    local_shopping_cart\n * @copyright  Wunderbyte GmbH <info@wunderbyte.at>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport Ajax from 'core/ajax';\nimport Templates from 'core/templates';\n\nimport {updateTotalPrice, buttoninit} from 'local_shopping_cart/cart';\n\nimport {\n    get_string as getString,\n    get_strings as getStrings\n        }\n        from 'core/str';\nimport {showNotification} from 'local_shopping_cart/notifications';\nimport ModalFactory from 'core/modal_factory';\nimport ModalEvents from 'core/modal_events';\nimport ModalForm from 'core_form/modalform';\n// As there is a dependency, we can load it like this.\nimport {queries} from 'local_wunderbyte_table/init';\n\nconst SELECTORS = {\n    CANCELBUTTON: '.cashier-history-items .shopping_cart_history_cancel_button',\n    PAIDBACKBUTTON: 'button.shopping_cart_history_paidback_button',\n    CREDITSMANAGER: 'button.shopping_cart_history_creditsmanager',\n    REBOOKBUTTON: '.shopping_cart_history_rebook_button',\n};\n\n// Little hack to get strings at top-level although getString is asynchronous.\nlet creditsmanagersuccess = 'success';\nlet notenoughcredits = 'notenoughcredits';\n(async() => {\n    creditsmanagersuccess = await getString('creditsmanagersuccess', 'local_shopping_cart');\n    notenoughcredits = await getString('notenoughcredits', 'local_shopping_cart');\n})();\n\nexport const init = (cancelationFee = null) => {\n\n    // eslint-disable-next-line no-console\n    console.log('init');\n\n    const buttons = document.querySelectorAll(SELECTORS.CANCELBUTTON);\n\n    buttons.forEach(button => {\n\n        if (!button.dataset.initialized) {\n\n            if (button.dataset.canceled == true) {\n                setButtonToCanceled(button);\n            } else {\n                button.addEventListener('click', event => {\n\n                    event.preventDefault();\n                    event.stopPropagation();\n\n                    if (button.dataset.canceled == false) {\n\n                        // We find out if we are on the cashiers page. Only there, we set the cashiers modal.\n\n                        if (window.location.href.includes('cashier.php')) {\n                            confirmCancelAndSetCreditModal(button);\n                        } else {\n                            // We only add the functionality if we got a cancelation fee.\n                            confirmCancelModal(button, cancelationFee);\n                        }\n                    }\n\n                });\n            }\n            button.dataset.initialized = true;\n        }\n    });\n\n    const elements = document.querySelectorAll(SELECTORS.PAIDBACKBUTTON);\n\n    elements.forEach(element => {\n\n        if (!element.dataset.initialized) {\n            element.addEventListener('click', event => {\n\n                event.preventDefault();\n                event.stopPropagation();\n\n                confirmPaidBackModal(element);\n            });\n            element.dataset.initialized = true;\n        }\n    });\n\n    // Credits manager button.\n    const creditsmanagerbtn = document.querySelectorAll(SELECTORS.CREDITSMANAGER);\n    creditsmanagerbtn.forEach(btn => {\n        if (!btn.dataset.initialized) {\n            btn.addEventListener('click', event => {\n                event.preventDefault();\n                event.stopPropagation();\n                openCreditsManagerModal(btn);\n            });\n            btn.dataset.initialized = true;\n        }\n    });\n\n    // Mark for rebooking button.\n    const rebookbuttons = document.querySelectorAll(SELECTORS.REBOOKBUTTON);\n    rebookbuttons.forEach(btn => {\n        if (!btn.dataset.initialized) {\n            btn.addEventListener('click', event => {\n                event.preventDefault();\n                event.stopPropagation();\n                markforrebooking(btn);\n            });\n            btn.dataset.initialized = true;\n        }\n    });\n};\n\n/**\n * This triggers the ajax call to acutally cancel the purchase.\n * @param {int} itemid\n * @param {string} area\n * @param {int} userid\n * @param {string} componentname\n * @param {int} historyid\n * @param {string} currency\n * @param {string} price\n * @param {string} credit\n * @param {type} button\n */\nexport function cancelPurchase(itemid, area, userid, componentname, historyid, currency, price, credit, button) {\n\n    Ajax.call([{\n        methodname: \"local_shopping_cart_cancel_purchase\",\n        args: {\n            'itemid': itemid,\n            'componentname': componentname,\n            'area': area,\n            'userid': userid,\n            'historyid': historyid,\n            'credit': credit\n        },\n        done: function(data) {\n\n            if (data.success == 1) {\n\n                getString('cancelsuccess', 'local_shopping_cart').then(message => {\n\n                    showNotification(message, \"success\");\n\n                    return;\n                }).catch(e => {\n                    // eslint-disable-next-line no-console\n                    console.log(e);\n                });\n\n                // When we have no button, this means that we\n                if (!button) {\n                    import('local_wunderbyte_table/reload')\n                    .then(wbt => {\n                        // Look if there are tables on this page.\n                        if (queries && queries.length > 0) {\n                            wbt.reloadAllTables();\n                        } else {\n                            window.location.reload();\n                        }\n                        return;\n                    })\n                    .catch(err => {\n                            // Handle any errors, including if the module doesn't exist\n                            // eslint-disable-next-line no-console\n                            console.log(err);\n                            window.location.reload();\n                    });\n                    return;\n                }\n                setButtonToCanceled(button);\n\n                showCredit(data.credit, currency, userid);\n\n                // Make sure addtocartbutton active againe once the item is removed from the shopping cart.\n                const addtocartbutton = document.querySelector('#btn-' + componentname + '-' + itemid);\n\n                // If there is not addtocartbutton, we have to add it anew.\n                if (!addtocartbutton) {\n\n                    data.itemid = itemid;\n                    data.componentname = componentname;\n                    data.price = Number(price).toFixed(2); // Creates a string with two decimals.\n\n                    Templates.renderForPromise('local_shopping_cart/addtocartdb', data).then(({html}) => {\n\n                        // Get parentelement.\n                        let parent = document.querySelector('span.price_' + componentname + \"_\" + itemid);\n                        parent.textContent = price + \" \" + currency;\n\n                        if (parent) {\n                            parent.insertAdjacentHTML('beforeend', html);\n                        }\n\n                        buttoninit(itemid, componentname);\n                        return true;\n                    }).catch((e) => {\n                        // eslint-disable-next-line no-console\n                        console.log(e);\n                    });\n                } else {\n\n                     addtocartbutton.classList.remove('disabled');\n                     addtocartbutton.dataset.initialized = false;\n                     buttoninit(itemid, componentname);\n                }\n\n            } else {\n                getString('canceldidntwork', 'local_shopping_cart').then(message => {\n\n                    showNotification(message, \"danger\");\n\n                    return;\n                }).catch(e => {\n                    // eslint-disable-next-line no-console\n                    console.log(e);\n                });\n            }\n\n        },\n        fail: function(ex) {\n            // eslint-disable-next-line no-console\n            console.log(\"ex:\" + ex);\n        },\n    }]);\n\n}\n\n/**\n * Function to change classes and text of button.\n * @param {*} button\n */\nfunction setButtonToCanceled(button) {\n\n    button.classList.add('disabled');\n    button.classList.remove('btn-primary');\n    button.classList.add('btn-danger');\n    button.dataset.canceled = true;\n\n    getString('canceled', 'local_shopping_cart').then(result => {\n\n        button.innerText = result;\n        return;\n    }).catch(e => {\n        // eslint-disable-next-line no-console\n        console.log(e);\n    });\n}\n\n/**\n *\n * @param {string} credit\n * @param {string} currency\n * @param {int} userid\n */\nfunction showCredit(credit, currency, userid) {\n\n    let creditelement = document.querySelector('li.shopping_cart_history_paidback');\n\n    if (creditelement) {\n        creditelement.classList.remove('hidden');\n\n        let credittotalelement = creditelement.querySelector('span.credit_total');\n\n        credittotalelement.textContent = credit;\n\n    } else {\n\n        let data = {\n            'currency': currency,\n            'credit': Number(credit).toFixed(2), // Creates a string with two decimals.\n            'userid': userid\n        };\n\n        Templates.renderForPromise('local_shopping_cart/credit_item', data).then(({html}) => {\n\n            // Get parentelement.\n            let parent = document.querySelector('ul.cashier-history-items');\n\n            parent.insertAdjacentHTML('afterbegin', html);\n\n            // We rerun init after insert, to make sure we have the right value.\n            init();\n            return true;\n        }).catch((e) => {\n            // eslint-disable-next-line no-console\n            console.log(e);\n        });\n    }\n    // We also need to call the udpateTotalPrice function from this place to make sure everything is uptodate.\n    updateTotalPrice();\n}\n\n/**\n *\n * @param {*} element\n */\nfunction confirmPaidBack(element) {\n    const userid = element.dataset.userid;\n    const method = element.dataset.method;\n    const costcenter = element.dataset.costcenter;\n    Ajax.call([{\n        methodname: \"local_shopping_cart_credit_paid_back\",\n        args: {\n            userid,\n            method,\n            costcenter\n        },\n        done: function(data) {\n\n            // eslint-disable-next-line no-console\n            console.log(data);\n\n            let creditelement = document.querySelector('.credit_total');\n\n            creditelement.textContent = 0;\n\n            // We hide the creditelement once we have paid back everything.\n            let licreditelements = document.querySelectorAll('.shopping_cart_history_paidback');\n\n            licreditelements.forEach(licreditelement => licreditelement.classList.add('hidden'));\n\n            getString('creditpaidback', 'local_shopping_cart').then(message => {\n\n                showNotification(message, 'success');\n\n                return;\n            }).catch(e => {\n                // eslint-disable-next-line no-console\n                console.log(e);\n            });\n\n             // We also need to call the udpateTotalPrice function from this place to make sure everything is uptodate.\n            updateTotalPrice();\n            reloadHistory(userid);\n            return;\n        },\n        fail: function(ex) {\n        // eslint-disable-next-line no-console\n        console.log(\"ex:\" + ex);\n        },\n    }]);\n}\n\n/**\n *\n * @param {*} button\n * @param {*} cancelationFee\n */\nexport async function confirmCancelModal(button, cancelationFee) {\n\n    // eslint-disable-next-line no-console\n    console.log(button);\n\n    // If we have no price, but there are all the other values on the button...\n    // ... we first fetch the necessary data.\n    if (!button.dataset.hasOwnProperty('price')) {\n        await new Promise(function(resolve, reject) {\n            Ajax.call([{\n                methodname: 'local_shopping_cart_get_history_item',\n                args: {\n                    'itemid': button.dataset.itemid,\n                    'componentname': button.dataset.componentname,\n                    'area': button.dataset.area,\n                    'userid': button.dataset.userid,\n                },\n                done: function(data) {\n\n                    // eslint-disable-next-line no-console\n                    console.log(data);\n\n                    if (!data.success == 1) {\n                        resolve(data);\n                        return;\n                    }\n\n                    button.dataset.historyid = data.id;\n                    button.dataset.price = data.price;\n                    button.dataset.credit = 0;\n                    button.dataset.currency = data.currency;\n                    button.dataset.quotaconsumed = data.quotaconsumed;\n                    button.dataset.round = data.round;\n                    cancelationFee = data.cancelationfee;\n                    button.dataset.buttontonull = true;\n\n                    resolve(data);\n                },\n                fail: ex => {\n                    // eslint-disable-next-line no-console\n                    console.log(\"failed to load information for modal: \" + JSON.stringify(ex));\n                    reject(ex);\n                }\n            }]);\n        });\n    }\n    if (!button.dataset.hasOwnProperty('price')) {\n        getString('canceldidntwork', 'local_shopping_cart').then(message => {\n\n            showNotification(message, \"danger\");\n\n            return;\n        }).catch(e => {\n            // eslint-disable-next-line no-console\n            console.log(e);\n        });\n        return;\n    }\n\n    // Before showing the cancel modal, we need to gather some information and pass it to the string.\n    if (cancelationFee === null) {\n        cancelationFee = 0;\n    }\n\n    const price = parseFloat(button.dataset.price);\n    // Quota consumed is always on two deciamals.\n    const quotaconsumed = parseFloat(button.dataset.quotaconsumed);\n\n    const deducedvalue = price * quotaconsumed;\n    const credit = price - deducedvalue - cancelationFee;\n    const currency = button.dataset.currency;\n    // We always round percentages.\n    const percentage = Math.round(quotaconsumed * 100);\n\n    const params = {\n        quotaconsumed: quotaconsumed.toFixed(2),\n        percentage: percentage + '%',\n        currency: currency,\n        deducedvalue: deducedvalue,\n    };\n\n    const roundvalues = button.dataset.round;\n    if (roundvalues) {\n        params.price = Math.round(price);\n        params.credit = Math.round(credit);\n        params.cancelationfee = Math.round(cancelationFee);\n        params.deducedvalue = Math.round(deducedvalue);\n    } else {\n        params.price = price.toFixed(2);\n        params.credit = credit.toFixed(2);\n        params.cancelationfee = cancelationFee.toFixed(2);\n        params.deducedvalue = deducedvalue.toFixed(2);\n    }\n\n    let bodystring = 'confirmcancelbodyuser';\n    if (quotaconsumed > 0 && quotaconsumed < 1) {\n        bodystring = 'confirmcancelbodyuserconsumption';\n    } else if (quotaconsumed == 1) {\n        bodystring = 'confirmcancelbodyusernocredit';\n    }\n\n    // Finally, make sure that we don't have negative values.\n    if (params.credit < 0) {\n        params.cancelationFee = 0 - params.credit; // Will be between 0 and cancelationfee.\n        params.credit = 0;\n    }\n\n    // eslint-disable-next-line no-console\n    console.log(params);\n\n    getStrings([\n            {key: 'confirmcanceltitle', component: 'local_shopping_cart'},\n            {key: bodystring, component: 'local_shopping_cart', param: params},\n            {key: 'cancelpurchase', component: 'local_shopping_cart'}\n        ]\n    ).then(strings => {\n        // eslint-disable-next-line promise/no-nesting\n        ModalFactory.create({type: ModalFactory.types.SAVE_CANCEL}).then(modal => {\n\n            modal.setTitle(strings[0]);\n            modal.setBody(strings[1]);\n            modal.setSaveButtonText(strings[2]);\n            modal.getRoot().on(ModalEvents.save, function() {\n\n                const historyid = button.dataset.historyid;\n                const itemid = button.dataset.itemid;\n                const userid = button.dataset.userid;\n                const currency = button.dataset.currency;\n                const componentname = button.dataset.componentname;\n                const area = button.dataset.area;\n                const price = button.dataset.price;\n\n                if (button.dataset.buttontonull) {\n                    button = null;\n                }\n\n                cancelPurchase(itemid, area, userid, componentname, historyid, currency, price, 0, button);\n            });\n\n            modal.show();\n            return modal;\n        }).catch(e => {\n            // eslint-disable-next-line no-console\n            console.log(e);\n        });\n        return true;\n    }).catch(e => {\n        // eslint-disable-next-line no-console\n        console.log(e);\n    });\n}\n\n/**\n *\n * @param {*} button\n */\nfunction confirmCancelAndSetCreditModal(button) {\n\n    const price = button.dataset.price;\n    const historyid = button.dataset.historyid;\n    const itemid = button.dataset.itemid;\n    const userid = button.dataset.userid;\n    const currency = button.dataset.currency;\n    const componentname = button.dataset.componentname;\n    const area = button.dataset.area;\n\n    const modalForm = new ModalForm({\n\n        // Name of the class where form is defined (must extend \\core_form\\dynamic_form):\n        formClass: \"local_shopping_cart\\\\form\\\\modal_cancel_addcredit\",\n        // Add as many arguments as you need, they will be passed to the form:\n        args: {'price': price,\n               'historyid': historyid,\n               'itemid': itemid,\n               'userid': userid,\n               'currency': currency,\n               'componentname': componentname,\n               'area': area},\n        // Pass any configuration settings to the modal dialogue, for example, the title:\n        modalConfig: {title: getString('confirmcanceltitle', 'local_shopping_cart')},\n        // DOM element that should get the focus after the modal dialogue is closed:\n        returnFocus: button\n    });\n    // Listen to events if you want to execute something on form submit.\n    // Event detail will contain everything the process() function returned:\n    modalForm.addEventListener(modalForm.events.FORM_SUBMITTED, (e) => {\n        const response = e.detail;\n        // eslint-disable-next-line no-console\n        console.log(response);\n\n        const url = new URL(window.location.href);\n        url.searchParams.append('userid', userid);\n        window.location.replace(url.toString());\n    });\n\n    // Show the form.\n    modalForm.show();\n}\n\n/**\n *\n * @param {*} element\n */\nfunction confirmPaidBackModal(element) {\n\n    getStrings([\n        {key: 'confirmpaidbacktitle', component: 'local_shopping_cart'},\n        {key: 'confirmpaidbackbody', component: 'local_shopping_cart'},\n        {key: 'confirmpaidback', component: 'local_shopping_cart'}\n    ]\n    ).then(strings => {\n        // eslint-disable-next-line promise/no-nesting\n        ModalFactory.create({type: ModalFactory.types.SAVE_CANCEL}).then(modal => {\n\n            modal.setTitle(strings[0]);\n                modal.setBody(strings[1]);\n                modal.setSaveButtonText(strings[2]);\n                modal.getRoot().on(ModalEvents.save, function() {\n\n                    confirmPaidBack(element);\n                });\n\n                modal.show();\n                return modal;\n        }).catch(e => {\n            // eslint-disable-next-line no-console\n            console.log(e);\n        });\n        return true;\n    }).catch(e => {\n        // eslint-disable-next-line no-console\n        console.log(e);\n    });\n}\n\n/**\n * Open the credits manager modal.\n * @param {htmlElement} button\n */\nfunction openCreditsManagerModal(button) {\n    // eslint-disable-next-line no-console\n    console.log('credits-managermodal');\n\n    const modalForm = new ModalForm({\n        // Name of the class where form is defined (must extend \\core_form\\dynamic_form):\n        formClass: \"local_shopping_cart\\\\form\\\\modal_creditsmanager\",\n        // Add as many arguments as you need, they will be passed to the form:\n        args: {\n            userid: button.dataset.userid\n        },\n        // Pass any configuration settings to the modal dialogue, for example, the title:\n        modalConfig: {title: getString('creditsmanager', 'local_shopping_cart')},\n        // DOM element that should get the focus after the modal dialogue is closed:\n        returnFocus: button\n    });\n    // Listen to events if you want to execute something on form submit.\n    // Event detail will contain everything the process() function returned:\n    modalForm.addEventListener(modalForm.events.FORM_SUBMITTED, (e) => {\n        const response = e.detail;\n\n        if (response.error && response.error == 'notenoughcredits') {\n            showNotification(notenoughcredits, 'danger');\n        } else {\n            // eslint-disable-next-line no-console\n            console.log('credits-manager-modal response: ', response);\n            showNotification(creditsmanagersuccess, 'info');\n            setTimeout(function() {\n                reload(e.detail.userid);\n            }, 1500);\n        }\n    });\n\n    // Show the form.\n    modalForm.show();\n}\n\n/**\n * Mark booking options for rebooking.\n * @param {htmlElement} button\n */\nfunction markforrebooking(button) {\n\n    // eslint-disable-next-line no-console\n    console.log(button);\n\n    const historyid = button.dataset.historyid;\n    const userid = button.dataset.userid;\n\n    Ajax.call([{\n        methodname: 'local_shopping_cart_mark_item_for_rebooking',\n        args: {\n            historyid,\n            userid\n        },\n        done: function(data) {\n\n            // eslint-disable-next-line no-console\n            console.log(data);\n            window.location.reload();\n\n        },\n        fail: ex => {\n            // eslint-disable-next-line no-console\n            console.log(\"local_shopping_cart_mark_item_for_rebooking failed: \" + JSON.stringify(ex));\n        },\n    }]);\n}\n\n/**\n * Function to reload current page with get param userid.\n * @param {*} userid\n */\nfunction reload(userid) {\n\n    reloadHistory(userid);\n    return;\n}\n\n/**\n * Function to reload Shopping cart history with get param userid.\n * @param {*} userid\n */\nexport function reloadHistory(userid) {\n\n    const histories\n        = document.querySelectorAll('[data-id=\"shopping-cart-history\"][data-userid=\"' + userid + '\"]');\n\n     // eslint-disable-next-line no-console\n     console.log(histories);\n\n    histories.forEach((history) => {\n\n        // eslint-disable-next-line no-console\n        console.log(history);\n\n        Ajax.call([{\n            methodname: \"local_shopping_cart_reload_history\",\n            args: {\n                'userid': userid,\n            },\n            done: function(data) {\n\n                // eslint-disable-next-line no-console\n                console.log(data);\n\n                Templates.renderForPromise('local_shopping_cart/history_card', data).then(({html, js}) => {\n\n                    Templates.replaceNode(history, html, js);\n\n                    return true;\n\n                    }).catch((e) => {\n                        // eslint-disable-next-line no-console\n                        console.log(e);\n                    });\n\n            },\n            fail: function(ex) {\n                // eslint-disable-next-line no-console\n                console.log(\"ex:\" + ex);\n            },\n        }]);\n    });\n}"],"names":["SELECTORS","creditsmanagersuccess","notenoughcredits","init","cancelationFee","console","log","buttons","document","querySelectorAll","forEach","button","dataset","initialized","canceled","setButtonToCanceled","addEventListener","event","preventDefault","stopPropagation","window","location","href","includes","confirmCancelAndSetCreditModal","confirmCancelModal","elements","element","confirmPaidBackModal","creditsmanagerbtn","btn","openCreditsManagerModal","rebookbuttons","markforrebooking","cancelPurchase","itemid","area","userid","componentname","historyid","currency","price","credit","call","methodname","args","done","data","success","then","message","catch","e","wbt","queries","length","reloadAllTables","reload","err","creditelement","querySelector","classList","remove","textContent","Number","toFixed","renderForPromise","_ref2","html","insertAdjacentHTML","showCredit","addtocartbutton","_ref","parent","fail","ex","add","result","innerText","hasOwnProperty","Promise","resolve","reject","id","quotaconsumed","round","cancelationfee","buttontonull","JSON","stringify","parseFloat","deducedvalue","percentage","Math","params","bodystring","key","component","param","strings","create","type","ModalFactory","types","SAVE_CANCEL","modal","setTitle","setBody","setSaveButtonText","getRoot","on","ModalEvents","save","show","modalForm","ModalForm","formClass","modalConfig","title","returnFocus","events","FORM_SUBMITTED","response","detail","url","URL","searchParams","append","replace","toString","method","costcenter","licreditelement","reloadHistory","confirmPaidBack","error","setTimeout","histories","history","_ref3","js","replaceNode"],"mappings":"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"}