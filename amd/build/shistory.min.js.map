{"version":3,"file":"shistory.min.js","sources":["../src/shistory.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\r\n//\r\n// Moodle is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// Moodle is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU General Public License\r\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\n/*\r\n * @package    local_shopping_cart\r\n * @copyright  Wunderbyte GmbH <info@wunderbyte.at>\r\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\r\n */\r\n\r\nimport Ajax from 'core/ajax';\r\nimport Templates from 'core/templates';\r\n\r\nimport {updateTotalPrice, buttoninit} from 'local_shopping_cart/cart';\r\n\r\nimport {\r\n    get_string as getString,\r\n    get_strings as getStrings\r\n        }\r\n        from 'core/str';\r\nimport {showNotification} from 'local_shopping_cart/notifications';\r\nimport ModalFactory from 'core/modal_factory';\r\nimport ModalEvents from 'core/modal_events';\r\nimport ModalForm from 'core_form/modalform';\r\n\r\nexport const init = (cancelationFee = null) => {\r\n\r\n    const buttons = document.querySelectorAll(\".cashier-history-items .shopping_cart_history_cancel_button\");\r\n\r\n    buttons.forEach(button => {\r\n\r\n        if (!button.dataset.initialized) {\r\n\r\n            if (button.dataset.canceled == true) {\r\n                setButtonToCanceled(button);\r\n            } else {\r\n                button.addEventListener('click', event => {\r\n\r\n                    event.preventDefault();\r\n                    event.stopPropagation();\r\n\r\n                    if (button.dataset.canceled == false) {\r\n\r\n                        // We find out if we are on the cashiers page. Only there, we set the cashiers modal.\r\n\r\n                        if (window.location.href.includes('cashier.php')) {\r\n                            confirmCancelAndSetCreditModal(button);\r\n                        } else {\r\n                            // We only add the functionality if we got a cancelation fee.\r\n                            confirmCancelModal(button, cancelationFee);\r\n                        }\r\n                    }\r\n\r\n                });\r\n            }\r\n            button.dataset.initialized = true;\r\n        }\r\n    });\r\n\r\n    const elements = document.querySelectorAll('button.shopping_cart_history_paidback_button');\r\n\r\n    elements.forEach(element => {\r\n\r\n        if (!element.dataset.initialized) {\r\n            element.addEventListener('click', event => {\r\n\r\n                event.preventDefault();\r\n                event.stopPropagation();\r\n\r\n                 confirmPaidBackModal(element);\r\n            });\r\n            element.dataset.initialized = true;\r\n        }\r\n    });\r\n};\r\n\r\n/**\r\n * This triggers the ajax call to acutally cancel the purchase.\r\n * @param {int} itemid\r\n * @param {string} area\r\n * @param {int} userid\r\n * @param {string} componentname\r\n * @param {int} historyid\r\n * @param {string} currency\r\n * @param {string} price\r\n * @param {string} credit\r\n * @param {type} button\r\n */\r\nfunction cancelPurchase(itemid, area, userid, componentname, historyid, currency, price, credit, button) {\r\n\r\n    Ajax.call([{\r\n        methodname: \"local_shopping_cart_cancel_purchase\",\r\n        args: {\r\n            'itemid': itemid,\r\n            'componentname': componentname,\r\n            'area': area,\r\n            'userid': userid,\r\n            'historyid': historyid,\r\n            'credit': credit\r\n        },\r\n        done: function(data) {\r\n\r\n            if (data.success == 1) {\r\n\r\n                getString('cancelsuccess', 'local_shopping_cart').then(message => {\r\n\r\n                    showNotification(message, \"success\");\r\n\r\n                    return;\r\n                }).catch(e => {\r\n                    // eslint-disable-next-line no-console\r\n                    console.log(e);\r\n                });\r\n\r\n                setButtonToCanceled(button);\r\n\r\n                showCredit(data.credit, currency, userid);\r\n\r\n                // Make sure addtocartbutton active againe once the item is removed from the shopping cart.\r\n                const addtocartbutton = document.querySelector('#btn-' + componentname + '-' + itemid);\r\n\r\n                // If there is not addtocartbutton, we have to add it anew.\r\n                if (!addtocartbutton) {\r\n\r\n                    data.itemid = itemid;\r\n                    data.componentname = componentname;\r\n                    data.price = Number(price).toFixed(2); // Creates a string with two decimals.\r\n\r\n                    Templates.renderForPromise('local_shopping_cart/addtocartdb', data).then(({html}) => {\r\n\r\n                        // Get parentelement.\r\n                        let parent = document.querySelector('span.price_' + componentname + \"_\" + itemid);\r\n                        parent.textContent = price + \" \" + currency;\r\n\r\n                        if (parent) {\r\n                            parent.insertAdjacentHTML('beforeend', html);\r\n                        }\r\n\r\n                        buttoninit(itemid, componentname);\r\n                        return true;\r\n                    }).catch((e) => {\r\n                        // eslint-disable-next-line no-console\r\n                        console.log(e);\r\n                    });\r\n                } else {\r\n\r\n                     addtocartbutton.classList.remove('disabled');\r\n                     addtocartbutton.dataset.initialized = false;\r\n                     buttoninit(itemid, componentname);\r\n                }\r\n\r\n            } else {\r\n                getString('canceldidntwork', 'local_shopping_cart').then(message => {\r\n\r\n                    showNotification(message, \"danger\");\r\n\r\n                    return;\r\n                }).catch(e => {\r\n                    // eslint-disable-next-line no-console\r\n                    console.log(e);\r\n                });\r\n            }\r\n\r\n        },\r\n        fail: function(ex) {\r\n            // eslint-disable-next-line no-console\r\n            console.log(\"ex:\" + ex);\r\n        },\r\n    }]);\r\n\r\n}\r\n\r\n/**\r\n * Function to change classes and text of button.\r\n * @param {*} button\r\n */\r\nfunction setButtonToCanceled(button) {\r\n\r\n    button.classList.add('disabled');\r\n    button.classList.remove('btn-primary');\r\n    button.classList.add('btn-danger');\r\n    button.dataset.canceled = true;\r\n\r\n    getString('canceled', 'local_shopping_cart').then(result => {\r\n\r\n        button.innerText = result;\r\n        return;\r\n    }).catch(e => {\r\n        // eslint-disable-next-line no-console\r\n        console.log(e);\r\n    });\r\n}\r\n\r\n/**\r\n *\r\n * @param {string} credit\r\n * @param {string} currency\r\n * @param {int} userid\r\n */\r\nfunction showCredit(credit, currency, userid) {\r\n\r\n    let creditelement = document.querySelector('li.shopping_cart_history_paidback');\r\n\r\n    if (creditelement) {\r\n        creditelement.classList.remove('hidden');\r\n\r\n        let credittotalelement = creditelement.querySelector('span.credit_total');\r\n\r\n        credittotalelement.textContent = credit;\r\n\r\n    } else {\r\n\r\n        let data = {\r\n            'currency': currency,\r\n            'credit': Number(credit).toFixed(2), // Creates a string with two decimals.\r\n            'userid': userid\r\n        };\r\n\r\n        Templates.renderForPromise('local_shopping_cart/credit_item', data).then(({html}) => {\r\n\r\n            // Get parentelement.\r\n            let parent = document.querySelector('ul.cashier-history-items');\r\n\r\n            parent.insertAdjacentHTML('afterbegin', html);\r\n\r\n            // We rerun init after insert, to make sure we have the right value.\r\n            init();\r\n            return true;\r\n        }).catch((e) => {\r\n            // eslint-disable-next-line no-console\r\n            console.log(e);\r\n        });\r\n    }\r\n    // We also need to call the udpateTotalPrice function from this place to make sure everything is uptodate.\r\n    updateTotalPrice();\r\n}\r\n\r\n/**\r\n *\r\n * @param {*} element\r\n */\r\nfunction confirmPaidBack(element) {\r\n    const userid = element.dataset.userid;\r\n    Ajax.call([{\r\n        methodname: \"local_shopping_cart_credit_paid_back\",\r\n        args: {\r\n            userid\r\n        },\r\n        done: function(data) {\r\n\r\n            // eslint-disable-next-line no-console\r\n            console.log(data);\r\n\r\n            let creditelement = document.querySelector('.credit_total');\r\n\r\n            creditelement.textContent = 0;\r\n\r\n            // We hide the creditelement once we have paid back everything.\r\n            let licreditelement = document.querySelector('.shopping_cart_history_paidback');\r\n            licreditelement.classList.add('hidden');\r\n\r\n            getString('creditpaidback', 'local_shopping_cart').then(message => {\r\n\r\n                showNotification(message, 'success');\r\n\r\n                return;\r\n            }).catch(e => {\r\n                // eslint-disable-next-line no-console\r\n                console.log(e);\r\n            });\r\n\r\n             // We also need to call the udpateTotalPrice function from this place to make sure everything is uptodate.\r\n            updateTotalPrice();\r\n            return;\r\n        },\r\n        fail: function(ex) {\r\n        // eslint-disable-next-line no-console\r\n        console.log(\"ex:\" + ex);\r\n        },\r\n    }]);\r\n}\r\n\r\n/**\r\n *\r\n * @param {*} button\r\n * @param {*} cancelationFee\r\n */\r\nfunction confirmCancelModal(button, cancelationFee) {\r\n\r\n    // Before showing the cancel modal, we need to gather some information and pass it to the string.\r\n    if (cancelationFee === null) {\r\n        cancelationFee = 0;\r\n    }\r\n\r\n    const price = parseFloat(button.dataset.price);\r\n    // Quota consumed is always on two deciamals.\r\n    const quotaconsumed = parseFloat(button.dataset.quotaconsumed);\r\n\r\n    const credit = price - (price * quotaconsumed) - cancelationFee;\r\n    const currency = button.dataset.currency;\r\n    // We always round percentages.\r\n    const percentage = Math.round(quotaconsumed * 100);\r\n\r\n    const params = {\r\n        quotaconsumed: quotaconsumed.toFixed(2),\r\n        percentage: percentage + '%',\r\n        currency: currency,\r\n    };\r\n\r\n    const roundvalues = button.dataset.round;\r\n    if (roundvalues) {\r\n        params.price = Math.round(price);\r\n        params.credit = Math.round(credit);\r\n        params.cancelationfee = Math.round(cancelationFee);\r\n    } else {\r\n        params.price = price.toFixed(2);\r\n        params.credit = credit.toFixed(2);\r\n        params.cancelationfee = cancelationFee.toFixed(2);\r\n    }\r\n\r\n    let bodystring = 'confirmcancelbodyuser';\r\n    if (quotaconsumed > 0 && quotaconsumed < 1) {\r\n        bodystring = 'confirmcancelbodyuserconsumption';\r\n    } else if (quotaconsumed == 1) {\r\n        bodystring = 'confirmcancelbodyusernocredit';\r\n    }\r\n\r\n    // Finally, make sure that we don't have negative values.\r\n    if (params.credit < 0) {\r\n        params.cancelationFee = 0 - params.credit; // Will be between 0 and cancelationfee.\r\n        params.credit = 0;\r\n    }\r\n\r\n    // eslint-disable-next-line no-console\r\n    console.log(params);\r\n\r\n    getStrings([\r\n            {key: 'confirmcanceltitle', component: 'local_shopping_cart'},\r\n            {key: bodystring, component: 'local_shopping_cart', param: params},\r\n            {key: 'cancelpurchase', component: 'local_shopping_cart'}\r\n        ]\r\n        ).then(strings => {\r\n\r\n            ModalFactory.create({type: ModalFactory.types.SAVE_CANCEL}).then(modal => {\r\n\r\n                modal.setTitle(strings[0]);\r\n                    modal.setBody(strings[1]);\r\n                    modal.setSaveButtonText(strings[2]);\r\n                    modal.getRoot().on(ModalEvents.save, function() {\r\n\r\n                        const historyid = button.dataset.historyid;\r\n                        const itemid = button.dataset.itemid;\r\n                        const userid = button.dataset.userid;\r\n                        const currency = button.dataset.currency;\r\n                        const componentname = button.dataset.componentname;\r\n                        const area = button.dataset.area;\r\n                        const price = button.dataset.price;\r\n\r\n                        cancelPurchase(itemid, area, userid, componentname, historyid, currency, price, 0, button);\r\n                    });\r\n\r\n                    modal.show();\r\n                    return modal;\r\n            }).catch(e => {\r\n                // eslint-disable-next-line no-console\r\n                console.log(e);\r\n            });\r\n            return true;\r\n        }).catch(e => {\r\n            // eslint-disable-next-line no-console\r\n            console.log(e);\r\n        });\r\n}\r\n\r\n/**\r\n *\r\n * @param {*} button\r\n */\r\nfunction confirmCancelAndSetCreditModal(button) {\r\n\r\n    const price = button.dataset.price;\r\n    const historyid = button.dataset.historyid;\r\n    const itemid = button.dataset.itemid;\r\n    const userid = button.dataset.userid;\r\n    const currency = button.dataset.currency;\r\n    const componentname = button.dataset.componentname;\r\n    const area = button.dataset.area;\r\n\r\n    const modalForm = new ModalForm({\r\n\r\n        // Name of the class where form is defined (must extend \\core_form\\dynamic_form):\r\n        formClass: \"local_shopping_cart\\\\form\\\\modal_cancel_addcredit\",\r\n        // Add as many arguments as you need, they will be passed to the form:\r\n        args: {'price': price,\r\n               'historyid': historyid,\r\n               'itemid': itemid,\r\n               'userid': userid,\r\n               'currency': currency,\r\n               'componentname': componentname,\r\n               'area': area},\r\n        // Pass any configuration settings to the modal dialogue, for example, the title:\r\n        modalConfig: {title: getString('confirmcanceltitle', 'local_shopping_cart')},\r\n        // DOM element that should get the focus after the modal dialogue is closed:\r\n        returnFocus: button\r\n    });\r\n    // Listen to events if you want to execute something on form submit.\r\n    // Event detail will contain everything the process() function returned:\r\n    modalForm.addEventListener(modalForm.events.FORM_SUBMITTED, (e) => {\r\n        const response = e.detail;\r\n        // eslint-disable-next-line no-console\r\n        console.log(response);\r\n        window.location.reload();\r\n    });\r\n\r\n    // Show the form.\r\n    modalForm.show();\r\n}\r\n\r\n/**\r\n *\r\n * @param {*} element\r\n */\r\nfunction confirmPaidBackModal(element) {\r\n\r\n    getStrings([\r\n        {key: 'confirmpaidbacktitle', component: 'local_shopping_cart'},\r\n        {key: 'confirmpaidbackbody', component: 'local_shopping_cart'},\r\n        {key: 'confirmpaidback', component: 'local_shopping_cart'}\r\n    ]\r\n    ).then(strings => {\r\n\r\n        ModalFactory.create({type: ModalFactory.types.SAVE_CANCEL}).then(modal => {\r\n\r\n            modal.setTitle(strings[0]);\r\n                modal.setBody(strings[1]);\r\n                modal.setSaveButtonText(strings[2]);\r\n                modal.getRoot().on(ModalEvents.save, function() {\r\n\r\n                    confirmPaidBack(element);\r\n                });\r\n\r\n                modal.show();\r\n                return modal;\r\n        }).catch(e => {\r\n            // eslint-disable-next-line no-console\r\n            console.log(e);\r\n        });\r\n        return true;\r\n    }).catch(e => {\r\n        // eslint-disable-next-line no-console\r\n        console.log(e);\r\n    });\r\n}"],"names":["init","cancelationFee","document","querySelectorAll","forEach","button","dataset","initialized","canceled","setButtonToCanceled","addEventListener","event","preventDefault","stopPropagation","window","location","href","includes","price","historyid","itemid","userid","currency","componentname","area","modalForm","ModalForm","formClass","args","modalConfig","title","returnFocus","events","FORM_SUBMITTED","e","response","detail","console","log","reload","show","confirmCancelAndSetCreditModal","parseFloat","quotaconsumed","credit","percentage","Math","round","params","toFixed","roundvalues","cancelationfee","bodystring","key","component","param","then","strings","create","type","ModalFactory","types","SAVE_CANCEL","modal","setTitle","setBody","setSaveButtonText","getRoot","on","ModalEvents","save","call","methodname","done","data","success","message","catch","creditelement","querySelector","classList","remove","textContent","Number","renderForPromise","_ref2","html","insertAdjacentHTML","showCredit","addtocartbutton","_ref","parent","fail","ex","cancelPurchase","confirmCancelModal","element","add","confirmPaidBack","confirmPaidBackModal","result","innerText"],"mappings":"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"}