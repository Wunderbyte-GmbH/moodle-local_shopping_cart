{"version":3,"file":"shistory.min.js","sources":["../src/shistory.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/*\n * @package    local_shopping_cart\n * @copyright  Wunderbyte GmbH <info@wunderbyte.at>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport Ajax from 'core/ajax';\nimport Templates from 'core/templates';\n\nimport {updateTotalPrice, buttoninit} from 'local_shopping_cart/cart';\n\nimport {\n    get_string as getString,\n    get_strings as getStrings\n        }\n        from 'core/str';\nimport {showNotification} from 'local_shopping_cart/notifications';\nimport ModalFactory from 'core/modal_factory';\nimport ModalEvents from 'core/modal_events';\nimport ModalForm from 'core_form/modalform';\n\nconst SELECTORS = {\n    CANCELBUTTON: '.cashier-history-items .shopping_cart_history_cancel_button',\n    PAIDBACKBUTTON: 'button.shopping_cart_history_paidback_button',\n    CREDITSMANAGER: 'button.shopping_cart_history_creditsmanager',\n    REBOOKBUTTON: '.shopping_cart_history_rebook_button',\n};\n\n// Little hack to get strings at top-level although getString is asynchronous.\nlet creditsmanagersuccess = 'success';\nlet notenoughcredits = 'notenoughcredits';\n(async() => {\n    creditsmanagersuccess = await getString('creditsmanagersuccess', 'local_shopping_cart');\n    notenoughcredits = await getString('notenoughcredits', 'local_shopping_cart');\n})();\n\nexport const init = (cancelationFee = null) => {\n\n    const buttons = document.querySelectorAll(SELECTORS.CANCELBUTTON);\n\n    buttons.forEach(button => {\n\n        if (!button.dataset.initialized) {\n\n            if (button.dataset.canceled == true) {\n                setButtonToCanceled(button);\n            } else {\n                button.addEventListener('click', event => {\n\n                    event.preventDefault();\n                    event.stopPropagation();\n\n                    if (button.dataset.canceled == false) {\n\n                        // We find out if we are on the cashiers page. Only there, we set the cashiers modal.\n\n                        if (window.location.href.includes('cashier.php')) {\n                            confirmCancelAndSetCreditModal(button);\n                        } else {\n                            // We only add the functionality if we got a cancelation fee.\n                            confirmCancelModal(button, cancelationFee);\n                        }\n                    }\n\n                });\n            }\n            button.dataset.initialized = true;\n        }\n    });\n\n    const elements = document.querySelectorAll(SELECTORS.PAIDBACKBUTTON);\n\n    elements.forEach(element => {\n\n        if (!element.dataset.initialized) {\n            element.addEventListener('click', event => {\n\n                event.preventDefault();\n                event.stopPropagation();\n\n                confirmPaidBackModal(element);\n            });\n            element.dataset.initialized = true;\n        }\n    });\n\n    // Credits manager button.\n    const creditsmanagerbtn = document.querySelectorAll(SELECTORS.CREDITSMANAGER);\n    creditsmanagerbtn.forEach(btn => {\n        if (!btn.dataset.initialized) {\n            btn.addEventListener('click', event => {\n                event.preventDefault();\n                event.stopPropagation();\n                openCreditsManagerModal(btn);\n            });\n            btn.dataset.initialized = true;\n        }\n    });\n\n    // Mark for rebooking button.\n    const rebookbuttons = document.querySelectorAll(SELECTORS.REBOOKBUTTON);\n    rebookbuttons.forEach(btn => {\n        if (!btn.dataset.initialized) {\n            btn.addEventListener('click', event => {\n                event.preventDefault();\n                event.stopPropagation();\n                markforrebooking(btn);\n            });\n            btn.dataset.initialized = true;\n        }\n    });\n};\n\n/**\n * This triggers the ajax call to acutally cancel the purchase.\n * @param {int} itemid\n * @param {string} area\n * @param {int} userid\n * @param {string} componentname\n * @param {int} historyid\n * @param {string} currency\n * @param {string} price\n * @param {string} credit\n * @param {type} button\n */\nfunction cancelPurchase(itemid, area, userid, componentname, historyid, currency, price, credit, button) {\n\n    Ajax.call([{\n        methodname: \"local_shopping_cart_cancel_purchase\",\n        args: {\n            'itemid': itemid,\n            'componentname': componentname,\n            'area': area,\n            'userid': userid,\n            'historyid': historyid,\n            'credit': credit\n        },\n        done: function(data) {\n\n            if (data.success == 1) {\n\n                getString('cancelsuccess', 'local_shopping_cart').then(message => {\n\n                    showNotification(message, \"success\");\n\n                    return;\n                }).catch(e => {\n                    // eslint-disable-next-line no-console\n                    console.log(e);\n                });\n\n                setButtonToCanceled(button);\n\n                showCredit(data.credit, currency, userid);\n\n                // Make sure addtocartbutton active againe once the item is removed from the shopping cart.\n                const addtocartbutton = document.querySelector('#btn-' + componentname + '-' + itemid);\n\n                // If there is not addtocartbutton, we have to add it anew.\n                if (!addtocartbutton) {\n\n                    data.itemid = itemid;\n                    data.componentname = componentname;\n                    data.price = Number(price).toFixed(2); // Creates a string with two decimals.\n\n                    Templates.renderForPromise('local_shopping_cart/addtocartdb', data).then(({html}) => {\n\n                        // Get parentelement.\n                        let parent = document.querySelector('span.price_' + componentname + \"_\" + itemid);\n                        parent.textContent = price + \" \" + currency;\n\n                        if (parent) {\n                            parent.insertAdjacentHTML('beforeend', html);\n                        }\n\n                        buttoninit(itemid, componentname);\n                        return true;\n                    }).catch((e) => {\n                        // eslint-disable-next-line no-console\n                        console.log(e);\n                    });\n                } else {\n\n                     addtocartbutton.classList.remove('disabled');\n                     addtocartbutton.dataset.initialized = false;\n                     buttoninit(itemid, componentname);\n                }\n\n            } else {\n                getString('canceldidntwork', 'local_shopping_cart').then(message => {\n\n                    showNotification(message, \"danger\");\n\n                    return;\n                }).catch(e => {\n                    // eslint-disable-next-line no-console\n                    console.log(e);\n                });\n            }\n\n        },\n        fail: function(ex) {\n            // eslint-disable-next-line no-console\n            console.log(\"ex:\" + ex);\n        },\n    }]);\n\n}\n\n/**\n * Function to change classes and text of button.\n * @param {*} button\n */\nfunction setButtonToCanceled(button) {\n\n    button.classList.add('disabled');\n    button.classList.remove('btn-primary');\n    button.classList.add('btn-danger');\n    button.dataset.canceled = true;\n\n    getString('canceled', 'local_shopping_cart').then(result => {\n\n        button.innerText = result;\n        return;\n    }).catch(e => {\n        // eslint-disable-next-line no-console\n        console.log(e);\n    });\n}\n\n/**\n *\n * @param {string} credit\n * @param {string} currency\n * @param {int} userid\n */\nfunction showCredit(credit, currency, userid) {\n\n    let creditelement = document.querySelector('li.shopping_cart_history_paidback');\n\n    if (creditelement) {\n        creditelement.classList.remove('hidden');\n\n        let credittotalelement = creditelement.querySelector('span.credit_total');\n\n        credittotalelement.textContent = credit;\n\n    } else {\n\n        let data = {\n            'currency': currency,\n            'credit': Number(credit).toFixed(2), // Creates a string with two decimals.\n            'userid': userid\n        };\n\n        Templates.renderForPromise('local_shopping_cart/credit_item', data).then(({html}) => {\n\n            // Get parentelement.\n            let parent = document.querySelector('ul.cashier-history-items');\n\n            parent.insertAdjacentHTML('afterbegin', html);\n\n            // We rerun init after insert, to make sure we have the right value.\n            init();\n            return true;\n        }).catch((e) => {\n            // eslint-disable-next-line no-console\n            console.log(e);\n        });\n    }\n    // We also need to call the udpateTotalPrice function from this place to make sure everything is uptodate.\n    updateTotalPrice();\n}\n\n/**\n *\n * @param {*} element\n */\nfunction confirmPaidBack(element) {\n    const userid = element.dataset.userid;\n    const method = element.dataset.method;\n    Ajax.call([{\n        methodname: \"local_shopping_cart_credit_paid_back\",\n        args: {\n            userid,\n            method\n        },\n        done: function(data) {\n\n            // eslint-disable-next-line no-console\n            console.log(data);\n\n            let creditelement = document.querySelector('.credit_total');\n\n            creditelement.textContent = 0;\n\n            // We hide the creditelement once we have paid back everything.\n            let licreditelements = document.querySelectorAll('.shopping_cart_history_paidback');\n\n            licreditelements.forEach(licreditelement => licreditelement.classList.add('hidden'));\n\n            getString('creditpaidback', 'local_shopping_cart').then(message => {\n\n                showNotification(message, 'success');\n\n                return;\n            }).catch(e => {\n                // eslint-disable-next-line no-console\n                console.log(e);\n            });\n\n             // We also need to call the udpateTotalPrice function from this place to make sure everything is uptodate.\n            updateTotalPrice();\n            return;\n        },\n        fail: function(ex) {\n        // eslint-disable-next-line no-console\n        console.log(\"ex:\" + ex);\n        },\n    }]);\n}\n\n/**\n *\n * @param {*} button\n * @param {*} cancelationFee\n */\nfunction confirmCancelModal(button, cancelationFee) {\n\n    // Before showing the cancel modal, we need to gather some information and pass it to the string.\n    if (cancelationFee === null) {\n        cancelationFee = 0;\n    }\n\n    const price = parseFloat(button.dataset.price);\n    // Quota consumed is always on two deciamals.\n    const quotaconsumed = parseFloat(button.dataset.quotaconsumed);\n\n    const deducedvalue = price * quotaconsumed;\n    const credit = price - deducedvalue - cancelationFee;\n    const currency = button.dataset.currency;\n    // We always round percentages.\n    const percentage = Math.round(quotaconsumed * 100);\n\n    const params = {\n        quotaconsumed: quotaconsumed.toFixed(2),\n        percentage: percentage + '%',\n        currency: currency,\n        deducedvalue: deducedvalue,\n    };\n\n    const roundvalues = button.dataset.round;\n    if (roundvalues) {\n        params.price = Math.round(price);\n        params.credit = Math.round(credit);\n        params.cancelationfee = Math.round(cancelationFee);\n        params.deducedvalue = Math.round(deducedvalue);\n    } else {\n        params.price = price.toFixed(2);\n        params.credit = credit.toFixed(2);\n        params.cancelationfee = cancelationFee.toFixed(2);\n        params.deducedvalue = deducedvalue.toFixed(2);\n    }\n\n    let bodystring = 'confirmcancelbodyuser';\n    if (quotaconsumed > 0 && quotaconsumed < 1) {\n        bodystring = 'confirmcancelbodyuserconsumption';\n    } else if (quotaconsumed == 1) {\n        bodystring = 'confirmcancelbodyusernocredit';\n    }\n\n    // Finally, make sure that we don't have negative values.\n    if (params.credit < 0) {\n        params.cancelationFee = 0 - params.credit; // Will be between 0 and cancelationfee.\n        params.credit = 0;\n    }\n\n    // eslint-disable-next-line no-console\n    console.log(params);\n\n    getStrings([\n            {key: 'confirmcanceltitle', component: 'local_shopping_cart'},\n            {key: bodystring, component: 'local_shopping_cart', param: params},\n            {key: 'cancelpurchase', component: 'local_shopping_cart'}\n        ]\n    ).then(strings => {\n        // eslint-disable-next-line promise/no-nesting\n        ModalFactory.create({type: ModalFactory.types.SAVE_CANCEL}).then(modal => {\n\n            modal.setTitle(strings[0]);\n            modal.setBody(strings[1]);\n            modal.setSaveButtonText(strings[2]);\n            modal.getRoot().on(ModalEvents.save, function() {\n\n                const historyid = button.dataset.historyid;\n                const itemid = button.dataset.itemid;\n                const userid = button.dataset.userid;\n                const currency = button.dataset.currency;\n                const componentname = button.dataset.componentname;\n                const area = button.dataset.area;\n                const price = button.dataset.price;\n\n                cancelPurchase(itemid, area, userid, componentname, historyid, currency, price, 0, button);\n            });\n\n            modal.show();\n            return modal;\n        }).catch(e => {\n            // eslint-disable-next-line no-console\n            console.log(e);\n        });\n        return true;\n    }).catch(e => {\n        // eslint-disable-next-line no-console\n        console.log(e);\n    });\n}\n\n/**\n *\n * @param {*} button\n */\nfunction confirmCancelAndSetCreditModal(button) {\n\n    const price = button.dataset.price;\n    const historyid = button.dataset.historyid;\n    const itemid = button.dataset.itemid;\n    const userid = button.dataset.userid;\n    const currency = button.dataset.currency;\n    const componentname = button.dataset.componentname;\n    const area = button.dataset.area;\n\n    const modalForm = new ModalForm({\n\n        // Name of the class where form is defined (must extend \\core_form\\dynamic_form):\n        formClass: \"local_shopping_cart\\\\form\\\\modal_cancel_addcredit\",\n        // Add as many arguments as you need, they will be passed to the form:\n        args: {'price': price,\n               'historyid': historyid,\n               'itemid': itemid,\n               'userid': userid,\n               'currency': currency,\n               'componentname': componentname,\n               'area': area},\n        // Pass any configuration settings to the modal dialogue, for example, the title:\n        modalConfig: {title: getString('confirmcanceltitle', 'local_shopping_cart')},\n        // DOM element that should get the focus after the modal dialogue is closed:\n        returnFocus: button\n    });\n    // Listen to events if you want to execute something on form submit.\n    // Event detail will contain everything the process() function returned:\n    modalForm.addEventListener(modalForm.events.FORM_SUBMITTED, (e) => {\n        const response = e.detail;\n        // eslint-disable-next-line no-console\n        console.log(response);\n\n        const url = new URL(window.location.href);\n        url.searchParams.append('userid', userid);\n        window.location.replace(url.toString());\n    });\n\n    // Show the form.\n    modalForm.show();\n}\n\n/**\n *\n * @param {*} element\n */\nfunction confirmPaidBackModal(element) {\n\n    getStrings([\n        {key: 'confirmpaidbacktitle', component: 'local_shopping_cart'},\n        {key: 'confirmpaidbackbody', component: 'local_shopping_cart'},\n        {key: 'confirmpaidback', component: 'local_shopping_cart'}\n    ]\n    ).then(strings => {\n        // eslint-disable-next-line promise/no-nesting\n        ModalFactory.create({type: ModalFactory.types.SAVE_CANCEL}).then(modal => {\n\n            modal.setTitle(strings[0]);\n                modal.setBody(strings[1]);\n                modal.setSaveButtonText(strings[2]);\n                modal.getRoot().on(ModalEvents.save, function() {\n\n                    confirmPaidBack(element);\n                });\n\n                modal.show();\n                return modal;\n        }).catch(e => {\n            // eslint-disable-next-line no-console\n            console.log(e);\n        });\n        return true;\n    }).catch(e => {\n        // eslint-disable-next-line no-console\n        console.log(e);\n    });\n}\n\n/**\n * Open the credits manager modal.\n * @param {htmlElement} button\n */\nfunction openCreditsManagerModal(button) {\n    // eslint-disable-next-line no-console\n    console.log('credits-managermodal');\n\n    const modalForm = new ModalForm({\n        // Name of the class where form is defined (must extend \\core_form\\dynamic_form):\n        formClass: \"local_shopping_cart\\\\form\\\\modal_creditsmanager\",\n        // Add as many arguments as you need, they will be passed to the form:\n        args: {\n            userid: button.dataset.userid\n        },\n        // Pass any configuration settings to the modal dialogue, for example, the title:\n        modalConfig: {title: getString('creditsmanager', 'local_shopping_cart')},\n        // DOM element that should get the focus after the modal dialogue is closed:\n        returnFocus: button\n    });\n    // Listen to events if you want to execute something on form submit.\n    // Event detail will contain everything the process() function returned:\n    modalForm.addEventListener(modalForm.events.FORM_SUBMITTED, (e) => {\n        const response = e.detail;\n\n        if (response.error && response.error == 'notenoughcredits') {\n            showNotification(notenoughcredits, 'danger');\n        } else {\n            // eslint-disable-next-line no-console\n            console.log('credits-manager-modal response: ', response);\n            showNotification(creditsmanagersuccess, 'info');\n            setTimeout(function() {\n                window.location.reload();\n            }, 1500);\n        }\n    });\n\n    // Show the form.\n    modalForm.show();\n}\n\n/**\n * Mark booking options for rebooking.\n * @param {htmlElement} button\n */\nfunction markforrebooking(button) {\n\n    // eslint-disable-next-line no-console\n    console.log(button);\n\n    const historyid = button.dataset.historyid;\n\n    Ajax.call([{\n        methodname: \"local_shopping_cart_mark_item_for_rebooking\",\n        args: {\n            historyid\n        },\n        done: function(data) {\n\n            // eslint-disable-next-line no-console\n            console.log(data);\n            window.location.reload();\n\n        },\n        fail: ex => {\n            // eslint-disable-next-line no-console\n            console.log(\"ex:\" + ex);\n        },\n    }]);\n}"],"names":["_interopRequireDefault","obj","__esModule","default","_ajax","_templates","_modal_factory","_modal_events","_modalform","SELECTORS","creditsmanagersuccess","notenoughcredits","getString","init","cancelationFee","arguments","length","undefined","document","querySelectorAll","forEach","button","dataset","initialized","canceled","setButtonToCanceled","addEventListener","event","preventDefault","stopPropagation","window","location","href","includes","price","historyid","itemid","userid","currency","componentname","area","modalForm","ModalForm","formClass","args","modalConfig","title","returnFocus","events","FORM_SUBMITTED","e","response","detail","console","log","url","URL","searchParams","append","replace","toString","show","confirmCancelAndSetCreditModal","parseFloat","quotaconsumed","deducedvalue","credit","percentage","Math","round","params","toFixed","roundvalues","cancelationfee","bodystring","getStrings","key","component","param","then","strings","ModalFactory","create","type","types","SAVE_CANCEL","modal","setTitle","setBody","setSaveButtonText","getRoot","on","ModalEvents","save","Ajax","call","methodname","done","data","success","message","showNotification","catch","creditelement","querySelector","classList","remove","textContent","Number","Templates","renderForPromise","_ref2","html","insertAdjacentHTML","updateTotalPrice","showCredit","addtocartbutton","buttoninit","_ref","parent","fail","ex","cancelPurchase","confirmCancelModal","element","method","licreditelement","add","confirmPaidBack","confirmPaidBackModal","btn","error","setTimeout","reload","openCreditsManagerModal","markforrebooking","result","innerText","_exports"],"mappings":"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"}