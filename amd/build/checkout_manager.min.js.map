{"version":3,"file":"checkout_manager.min.js","sources":["../src/checkout_manager.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/*\n * @package    local_shopping_cart\n * @copyright  Wunderbyte GmbH <info@wunderbyte.at>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\nimport ModalFactory from 'core/modal_factory';\nimport {get_string as getString} from 'core/str';\n\nimport {reinit} from 'local_shopping_cart/cart';\n\nconst SELECTORS = {\n    CHECKOUTMANAGERFORMID: '#shopping-cart-checkout-manager-form',\n    CHECKOUTMANAGERFORMTEMPLATE: 'local_shopping_cart/checkout_manager_form',\n    CHECKOUTMANAGERBUTTONSTEMPLATE: 'local_shopping_cart/checkout_manager_form_buttons',\n    CHECKOUTMANAGERBUTTONSID: 'shopping-cart-checkout-manager-buttons',\n    CHECKOUTMANAGERPROGRESSBARTEMPLATE: 'local_shopping_cart/checkout_manager_form_progress_bar',\n    CHECKOUTMANAGERPROGRESSBARID: 'shopping-cart-checkout-manager-status-bar',\n    BUTTONS: '.shopping-cart-checkout-manager-buttons button',\n    PROGRESSBUTTONS: '.shopping-cart-checkout-manager-status-bar button',\n    CHECKBOXITEMBODY: '#shopping-cart-checkout-manager-form-body',\n    NEWADDRESSBUTTON: '.shopping-cart-new-address',\n    FEEDBACKMESSAGE: '.shopping-cart-checkout-manager-alert-container',\n    PAYMENTREGIONBUTTON: 'div.shopping_cart_payment_region button'\n};\n\nconst WEBSERVICE = {\n    CHECKOUTPROCESS: 'local_shopping_cart_control_checkout_process',\n};\n\nconst EVENTSLISTENING = {\n    ADDRESSREDRAWN: 'local_shopping_cart/addressesRedrawn',\n};\n\nconst IDS = {\n    VATNUMBER: 'shopping-cart-checkout-manager-vat-number',\n    VERIFYVAT: 'shopping-cart-checkout-manager-verify-vat',\n    COUNTRYSELECT: 'shopping-cart-checkout-manager-country-select',\n};\n\n/**\n * Initializes the checkout manager functionality.\n */\nfunction init() {\n    const formBody = document.querySelector(SELECTORS.CHECKBOXITEMBODY);\n    initListeners(formBody);\n    document.addEventListener(EVENTSLISTENING.ADDRESSREDRAWN, getNewAddress);\n}\n\n/**\n * Initializes the checkout manager functionality.\n * @param {HTMLElement} formBody - The name of the web service.\n */\nfunction initListeners(formBody) {\n    initControlListener();\n    if (formBody != undefined) {\n        initChangeListener();\n        initVatNumberVerifyListener(formBody);\n    }\n\n}\n\n/**\n * Initializes the change listener for the form body.\n */\nfunction getNewAddress() {\n    const formBody = document.querySelector(SELECTORS.CHECKBOXITEMBODY);\n    const currentstep = getDatasetValue(formBody, 'currentstep');\n    const identifier = getDatasetValue(formBody, 'identifier');\n\n    if (currentstep !== null) {\n        triggerButtonControlWebService(WEBSERVICE.CHECKOUTPROCESS, {\n            action: '',\n            currentstep: currentstep,\n            identifier: identifier,\n        });\n    }\n}\n\n/**\n * Initializes the change listener for the form body.\n */\nfunction initVatNumberVerifyListener() {\n    const vatNumber = document.getElementById(IDS.VERIFYVAT);\n    if (vatNumber) {\n        vatNumber.addEventListener('click', vatNumberVerifyCallback);\n    }\n}\n\n/**\n * Initializes the change listener for the form body.\n */\nfunction vatNumberVerifyCallback() {\n    const formBody = document.querySelector(SELECTORS.CHECKBOXITEMBODY);\n    const countryCode = document.getElementById(IDS.COUNTRYSELECT)?.value;\n    const vatNumber = document.getElementById(IDS.VATNUMBER)?.value;\n\n    if (!countryCode || !vatNumber) {\n        ModalFactory.create({type: ModalFactory.types.CANCEL}).then(modal => {\n            modal.setTitle(getString('errorinvalidvatdatatitle', 'local_shopping_cart'));\n            modal.setBody(getString('errorinvalidvatdatadescription', 'local_shopping_cart'));\n            modal.show();\n            return modal;\n        }).catch(e => {\n            // eslint-disable-next-line no-console\n            console.log(e);\n        });\n        return;\n    }\n    triggerButtonControlWebService(WEBSERVICE.CHECKOUTPROCESS, {\n        action: getDatasetValue(formBody, 'action'),\n        currentstep: getDatasetValue(formBody, 'currentstep'),\n        identifier: getDatasetValue(formBody, 'identifier'),\n        changedinput: JSON.stringify({\n            'vatCodeCountry': `${countryCode},${vatNumber}`,\n        }),\n    });\n}\n\n/**\n * Initializes the change listener for the form body.\n */\nfunction initControlListener() {\n    const selectors = `${SELECTORS.BUTTONS}, ${SELECTORS.PROGRESSBUTTONS}`;\n    document.querySelectorAll(selectors).forEach(button => {\n        button.addEventListener('click', controlCallback);\n    });\n}\n\n/**\n * Initializes the change listener for the form body.\n */\nfunction controlCallback() {\n    const action = this.getAttribute('data-action');\n    const currentstep = this.getAttribute('data-currentstep');\n\n    const paymentbutton = document.querySelector(SELECTORS.PAYMENTREGIONBUTTON);\n    const identifier = paymentbutton ? paymentbutton.getAttribute('data-identifier') ?? '' : '';\n\n    if (action && currentstep) {\n        triggerButtonControlWebService(WEBSERVICE.CHECKOUTPROCESS, {\n            action: action,\n            currentstep: currentstep,\n            identifier: identifier,\n        });\n    }\n}\n\n/**\n * Initializes the change listener for the form body.\n */\nfunction initChangeListener() {\n    const formBody = document.querySelector(SELECTORS.CHECKBOXITEMBODY);\n    formBody.addEventListener('change', event => changeCallback(event, formBody));\n}\n\n/**\n * Initializes the change listener for the form body.\n * @param {Object} event - The name of the web service.\n * @param {HTMLElement} formBody - The parameters for the web service call.\n */\nfunction changeCallback(event, formBody) {\n    const target = event.target;\n    if (['INPUT', 'SELECT', 'TEXTAREA'].includes(target.tagName)) {\n        const changedInputs = getChangedInputs();\n        if (\n            target.hasAttribute('data-skip-webservice')\n        ) {\n            return;\n        }\n        if (target.type == 'checkbox') {\n            target.value = target.checked;\n        }\n\n        triggerButtonControlWebService(WEBSERVICE.CHECKOUTPROCESS, {\n            action: getDatasetValue(formBody, 'action'),\n            currentstep: getDatasetValue(formBody, 'currentstep'),\n            identifier: getDatasetValue(formBody, 'identifier'),\n            changedinput: JSON.stringify(changedInputs)\n        });\n    }\n}\n\n/**\n * Handles button control for the checkout process.\n */\nfunction getChangedInputs() {\n    const processElements = document.querySelectorAll('[data-shopping-cart-process-data=\"true\"]');\n    return Array.from(processElements).map(element => {\n        const value = element.type === 'checkbox' ? element.checked : element.value;\n        if (element.type === 'radio') {\n            return element.checked\n                ? {name: element.name || 'unnamed', value: value}\n                : [];\n        }\n\n        return {\n            name: element.name || 'unnamed',\n            value: value,\n        };\n    })\n    .filter(item => item !== null);\n}\n\n/**\n * Handles button control for the checkout process.\n * @param {string} serviceName - The name of the web service.\n * @param {Object} params - The parameters for the web service call.\n */\nfunction triggerButtonControlWebService(serviceName, params) {\n    require(['core/ajax'], function(Ajax) {\n        const requests = Ajax.call([{\n            methodname: serviceName,\n            args: params,\n        }]);\n        requests[0].done(function(response) {\n            updateCheckoutManagerPartials(response);\n        }).fail(function(err) {\n            // eslint-disable-next-line no-console\n            console.error('fail button trigger', err);\n            return;\n        });\n    });\n}\n\n/**\n * Updates specific Mustache partials dynamically based on the web service response.\n * @param {Object} data - The data returned from the web service.\n */\nfunction updateCheckoutManagerPartials(data) {\n    data.data = JSON.parse(data.data);\n    require(['core/templates'], function(templates) {\n        if (data.reloadbody) {\n            staticReloadBody(templates, data);\n        } else {\n            newReloadBody(templates, data);\n        }\n    });\n}\n\n/**\n * Utility to get dataset values safely.\n * @param {Object} templates - The element with the dataset.\n * @param {Array} data - The element with the dataset.\n */\nfunction newReloadBody(templates, data) {\n    const controlButtons = document.getElementById(SELECTORS.CHECKOUTMANAGERBUTTONSID);\n    const progressBar = document.getElementById(SELECTORS.CHECKOUTMANAGERPROGRESSBARID);\n    const feedbackMessageContainer = document.querySelector(SELECTORS.FEEDBACKMESSAGE);\n\n    if (!controlButtons) {\n        // eslint-disable-next-line no-console\n        console.error('controlButtons');\n        return;\n    }\n    // Render new content for the div\n    const renderButtonTemplate = templates.render(SELECTORS.CHECKOUTMANAGERBUTTONSTEMPLATE, data.data)\n        .then(function(html) {\n            controlButtons.innerHTML = html;\n            return;\n        })\n        .catch(function(err) {\n            // eslint-disable-next-line no-console\n            console.error('fail render button', err);\n        });\n    const progressBarTemplate = templates.render(SELECTORS.CHECKOUTMANAGERPROGRESSBARTEMPLATE, data.data)\n        .then(function(html) {\n            progressBar.innerHTML = html;\n            return;\n        })\n        .catch(function(err) {\n            // eslint-disable-next-line no-console\n            console.error('fail render button', err);\n        });\n    if (feedbackMessageContainer) {\n        const datafeedback = JSON.parse(data.managerdata);\n        if (\n            feedbackMessageContainer &&\n            datafeedback.feedback != undefined\n        ) {\n            templates.render('local_shopping_cart/checkout_manager_feedback', datafeedback.feedback)\n                .then(function(html) {\n                    feedbackMessageContainer.innerHTML = html;\n                    return;\n                })\n                .catch(function(err) {\n                    // eslint-disable-next-line no-console\n                    console.error('fail render feedback', err);\n                });\n        }\n    }\n    Promise.all([renderButtonTemplate, progressBarTemplate]).then(function() {\n        initControlListener();\n        callZeroPriceListener();\n        return;\n    }).catch(function(err) {\n        // eslint-disable-next-line no-console\n        console.error('fail init listener', err);\n    });\n}\n\n/**\n * Utility to get dataset values safely.\n * @param {Object} templates - The element with the dataset.\n * @param {Array} data - The element with the dataset.\n */\nfunction staticReloadBody(templates, data) {\n    templates.render(SELECTORS.CHECKOUTMANAGERFORMTEMPLATE, data.data)\n        .then(function(html, js) {\n            return templates.replaceNodeContents(document.querySelector(SELECTORS.CHECKOUTMANAGERFORMID), html, js);\n        })\n        .then(function() {\n            if (data.jsscript) {\n                const scriptContent = data.jsscript.replace(/<script[^>]*>|<\\/script>/gi, '');\n                try {\n                    templates.appendNodeContents(\n                        document.querySelector(SELECTORS.CHECKOUTMANAGERFORMID),\n                        '',\n                        scriptContent\n                );\n\n                } catch (err) {\n                    // eslint-disable-next-line no-console\n                    console.error('fail script', err);\n                }\n\n                callZeroPriceListener();\n            }\n            return;\n        })\n        .catch(function(err) {\n            // eslint-disable-next-line no-console\n            console.error('fail script', err);\n            return;\n        });\n}\n\n/**\n * Utility to get dataset values safely.\n * @param {HTMLElement} element - The element with the dataset.\n * @param {string} key - The dataset key.\n * @returns {string|null} - The value or null if not found.\n */\nfunction getDatasetValue(element, key) {\n    return element?.dataset[key] || '';\n}\n\nexport {\n    init,\n    getDatasetValue,\n    getChangedInputs\n};\n\n/**\n * Call the zero price listener.\n *\n * @return [type]\n *\n */\nfunction callZeroPriceListener() {\n    // Initially, we need to add the zeroPriceListener once.\n    const paymentbutton = document.querySelector(SELECTORS.PAYMENTREGIONBUTTON);\n    if (paymentbutton) {\n        reinit();\n    }\n}"],"names":["formBody","initControlListener","undefined","document","querySelector","SELECTORS","addEventListener","event","target","includes","tagName","changedInputs","getChangedInputs","hasAttribute","type","value","checked","triggerButtonControlWebService","WEBSERVICE","action","getDatasetValue","currentstep","identifier","changedinput","JSON","stringify","changeCallback","initChangeListener","vatNumber","getElementById","IDS","vatNumberVerifyCallback","initVatNumberVerifyListener","initListeners","EVENTSLISTENING","getNewAddress","countryCode","_document$getElementB","_document$getElementB2","create","ModalFactory","types","CANCEL","then","modal","setTitle","setBody","show","catch","e","console","log","selectors","querySelectorAll","forEach","button","controlCallback","this","getAttribute","paymentbutton","processElements","Array","from","map","element","name","filter","item","serviceName","params","require","Ajax","call","methodname","args","done","response","data","parse","templates","reloadbody","render","html","js","replaceNodeContents","jsscript","scriptContent","replace","appendNodeContents","err","error","callZeroPriceListener","staticReloadBody","controlButtons","progressBar","feedbackMessageContainer","renderButtonTemplate","innerHTML","progressBarTemplate","datafeedback","managerdata","feedback","Promise","all","newReloadBody","fail","key","dataset"],"mappings":"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"}